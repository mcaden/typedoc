{"version":3,"file":"tuple.js","sourceRoot":"","sources":["../../../../src/lib/models/types/tuple.ts"],"names":[],"mappings":";;AAAA,yCAAkC;AASlC,MAAa,SAAU,SAAQ,eAAI;IAgB/B,YAAY,QAAgB;QACxB,KAAK,EAAE,CAAC;QARH,SAAI,GAAW,OAAO,CAAC;QAS5B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAOD,KAAK;QACD,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAQD,MAAM,CAAC,IAAe;QAClB,IAAI,CAAC,CAAC,IAAI,YAAY,SAAS,CAAC,EAAE;YAC9B,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,eAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC9D,CAAC;IAMD,QAAQ;QACJ,MAAM,MAAM,GAAQ,KAAK,CAAC,QAAQ,EAAE,CAAC;QAErC,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACvC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC5D;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAKD,QAAQ;QACJ,MAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC9B,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,OAAO,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;IACxC,CAAC;CACJ;AApED,8BAoEC","sourcesContent":["import { Type } from './abstract';\r\n\r\n/**\r\n * Represents a tuple type.\r\n *\r\n * ~~~\r\n * let value: [string,boolean];\r\n * ~~~\r\n */\r\nexport class TupleType extends Type {\r\n    /**\r\n     * The ordered type elements of the tuple type.\r\n     */\r\n    elements: Type[];\r\n\r\n    /**\r\n     * The type name identifier.\r\n     */\r\n    readonly type: string = 'tuple';\r\n\r\n    /**\r\n     * Create a new TupleType instance.\r\n     *\r\n     * @param elements  The ordered type elements of the tuple type.\r\n     */\r\n    constructor(elements: Type[]) {\r\n        super();\r\n        this.elements = elements;\r\n    }\r\n\r\n    /**\r\n     * Clone this type.\r\n     *\r\n     * @return A clone of this type.\r\n     */\r\n    clone(): Type {\r\n        return new TupleType(this.elements);\r\n    }\r\n\r\n    /**\r\n     * Test whether this type equals the given type.\r\n     *\r\n     * @param type  The type that should be checked for equality.\r\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\r\n     */\r\n    equals(type: TupleType): boolean {\r\n        if (!(type instanceof TupleType)) {\r\n            return false;\r\n        }\r\n        return Type.isTypeListEqual(type.elements, this.elements);\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this type.\r\n     * @deprecated Use serializers instead\r\n     */\r\n    toObject(): any {\r\n        const result: any = super.toObject();\r\n\r\n        if (this.elements && this.elements.length) {\r\n            result.elements = this.elements.map((e) => e.toObject());\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return a string representation of this type.\r\n     */\r\n    toString() {\r\n        const names: string[] = [];\r\n        this.elements.forEach((element) => {\r\n            names.push(element.toString());\r\n        });\r\n\r\n        return '[' + names.join(', ') + ']';\r\n    }\r\n}\r\n"]}