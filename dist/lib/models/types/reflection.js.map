{"version":3,"file":"reflection.js","sourceRoot":"","sources":["../../../../src/lib/models/types/reflection.ts"],"names":[],"mappings":";;AACA,yCAAkC;AASlC,MAAa,cAAe,SAAQ,eAAI;IAgBpC,YAAY,WAAkC;QAC1C,KAAK,EAAE,CAAC;QARH,SAAI,GAAW,YAAY,CAAC;QASjC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;IAOD,KAAK;QACD,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAChD,CAAC;IAQD,MAAM,CAAC,IAAoB;QACvB,OAAO,IAAI,KAAK,IAAI,CAAC;IACzB,CAAC;IAMD,QAAQ;QACJ,MAAM,MAAM,GAAQ,KAAK,CAAC,QAAQ,EAAE,CAAC;QAErC,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;SACpD;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAKD,QAAQ;QACJ,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE;YAC3D,OAAO,UAAU,CAAC;SACrB;aAAM;YACH,OAAO,QAAQ,CAAC;SACnB;IACL,CAAC;CACJ;AAhED,wCAgEC","sourcesContent":["import { DeclarationReflection } from '../reflections/declaration';\r\nimport { Type } from './abstract';\r\n\r\n/**\r\n * Represents a type which has it's own reflection like literal types.\r\n *\r\n * ~~~\r\n * let value: {subValueA;subValueB;subValueC;};\r\n * ~~~\r\n */\r\nexport class ReflectionType extends Type {\r\n    /**\r\n     * The reflection of the type.\r\n     */\r\n    declaration: DeclarationReflection;\r\n\r\n    /**\r\n     * The type name identifier.\r\n     */\r\n    readonly type: string = 'reflection';\r\n\r\n    /**\r\n     * Create a new instance of ReflectionType.\r\n     *\r\n     * @param declaration  The reflection of the type.\r\n     */\r\n    constructor(declaration: DeclarationReflection) {\r\n        super();\r\n        this.declaration = declaration;\r\n    }\r\n\r\n    /**\r\n     * Clone this type.\r\n     *\r\n     * @return A clone of this type.\r\n     */\r\n    clone(): Type {\r\n        return new ReflectionType(this.declaration);\r\n    }\r\n\r\n    /**\r\n     * Test whether this type equals the given type.\r\n     *\r\n     * @param type  The type that should be checked for equality.\r\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\r\n     */\r\n    equals(type: ReflectionType): boolean {\r\n        return type === this;\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this type.\r\n     * @deprecated Use serializers instead\r\n     */\r\n    toObject(): any {\r\n        const result: any = super.toObject();\r\n\r\n        if (this.declaration) {\r\n            result.declaration = this.declaration.toObject();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return a string representation of this type.\r\n     */\r\n    toString() {\r\n        if (!this.declaration.children && this.declaration.signatures) {\r\n            return 'function';\r\n        } else {\r\n            return 'object';\r\n        }\r\n    }\r\n}\r\n"]}