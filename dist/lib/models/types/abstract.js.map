{"version":3,"file":"abstract.js","sourceRoot":"","sources":["../../../../src/lib/models/types/abstract.ts"],"names":[],"mappings":";;AAKA,MAAsB,IAAI;IAA1B;QAKa,SAAI,GAAW,MAAM,CAAC;IA+EnC,CAAC;IAhEG,MAAM,CAAC,IAAU;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAMD,QAAQ;QACJ,IAAI,MAAM,GAAQ,EAAE,CAAC;QACrB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAExB,OAAO,MAAM,CAAC;IAClB,CAAC;IAKD,QAAQ;QACJ,OAAO,MAAM,CAAC;IAClB,CAAC;IAQD,MAAM,CAAC,iBAAiB,CAAC,CAAS,EAAE,CAAS;QACzC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;YACvB,OAAO,KAAK,CAAC;SAChB;QACD,SAAS,EAAE,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE,EAAE;YAC5D,MAAM,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;YACjB,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE,EAAE;gBAC/B,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;oBAClB,SAAS,SAAS,CAAC;iBACtB;aACJ;YAED,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAQD,MAAM,CAAC,eAAe,CAAC,CAAS,EAAE,CAAS;QACvC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;YACvB,OAAO,KAAK,CAAC;SAChB;QACD,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,GAAG,KAAK,EAAE,KAAK,EAAE,EAAE;YAC1D,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC5B,OAAO,KAAK,CAAC;aAChB;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AApFD,oBAoFC","sourcesContent":["/**\r\n * Base class of all type definitions.\r\n *\r\n * Instances of this class are also used to represent the type `void`.\r\n */\r\nexport abstract class Type {\r\n\r\n    /**\r\n     * The type name identifier.\r\n     */\r\n    readonly type: string = 'void';\r\n\r\n    /**\r\n     * Clone this type.\r\n     *\r\n     * @return A clone of this type.\r\n     */\r\n    abstract clone(): Type;\r\n\r\n    /**\r\n     * Test whether this type equals the given type.\r\n     *\r\n     * @param type  The type that should be checked for equality.\r\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\r\n     */\r\n    equals(type: Type): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this type.\r\n     * @deprecated Use serializers instead\r\n     */\r\n    toObject(): any {\r\n        let result: any = {};\r\n        result.type = this.type;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return a string representation of this type.\r\n     */\r\n    toString(): string {\r\n        return 'void';\r\n    }\r\n\r\n    /**\r\n     * Test whether the two given list of types contain equal types.\r\n     *\r\n     * @param a\r\n     * @param b\r\n     */\r\n    static isTypeListSimilar(a: Type[], b: Type[]): boolean {\r\n        if (a.length !== b.length) {\r\n            return false;\r\n        }\r\n        outerLoop: for (let an = 0, count = a.length; an < count; an++) {\r\n            const at = a[an];\r\n            for (let bn = 0; bn < count; bn++) {\r\n                if (b[bn].equals(at)) {\r\n                    continue outerLoop;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Test whether the two given list of types are equal.\r\n     *\r\n     * @param a\r\n     * @param b\r\n     */\r\n    static isTypeListEqual(a: Type[], b: Type[]): boolean {\r\n        if (a.length !== b.length) {\r\n            return false;\r\n        }\r\n        for (let index = 0, count = a.length; index < count; index++) {\r\n            if (!a[index].equals(b[index])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n"]}