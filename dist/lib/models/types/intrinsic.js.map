{"version":3,"file":"intrinsic.js","sourceRoot":"","sources":["../../../../src/lib/models/types/intrinsic.ts"],"names":[],"mappings":";;AAAA,yCAAkC;AASlC,MAAa,aAAc,SAAQ,eAAI;IAgBnC,YAAY,IAAY;QACpB,KAAK,EAAE,CAAC;QARH,SAAI,GAAW,WAAW,CAAC;QAShC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAOD,KAAK;QACD,OAAO,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAQD,MAAM,CAAC,IAAmB;QACtB,OAAO,IAAI,YAAY,aAAa;YAChC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC;IAChC,CAAC;IAMD,QAAQ;QACJ,MAAM,MAAM,GAAQ,KAAK,CAAC,QAAQ,EAAE,CAAC;QACrC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACxB,OAAO,MAAM,CAAC;IAClB,CAAC;IAKD,QAAQ;QACJ,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;CACJ;AAzDD,sCAyDC","sourcesContent":["import { Type } from './abstract';\r\n\r\n/**\r\n * Represents an intrinsic type like `string` or `boolean`.\r\n *\r\n * ~~~\r\n * let value: number;\r\n * ~~~\r\n */\r\nexport class IntrinsicType extends Type {\r\n    /**\r\n     * The name of the intrinsic type like `string` or `boolean`.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * The type name identifier.\r\n     */\r\n    readonly type: string = 'intrinsic';\r\n\r\n    /**\r\n     * Create a new instance of IntrinsicType.\r\n     *\r\n     * @param name  The name of the intrinsic type like `string` or `boolean`.\r\n     */\r\n    constructor(name: string) {\r\n        super();\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Clone this type.\r\n     *\r\n     * @return A clone of this type.\r\n     */\r\n    clone(): Type {\r\n        return new IntrinsicType(this.name);\r\n    }\r\n\r\n    /**\r\n     * Test whether this type equals the given type.\r\n     *\r\n     * @param type  The type that should be checked for equality.\r\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\r\n     */\r\n    equals(type: IntrinsicType): boolean {\r\n        return type instanceof IntrinsicType &&\r\n            type.name === this.name;\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this type.\r\n     * @deprecated Use serializers instead\r\n     */\r\n    toObject(): any {\r\n        const result: any = super.toObject();\r\n        result.name = this.name;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return a string representation of this type.\r\n     */\r\n    toString() {\r\n        return this.name;\r\n    }\r\n}\r\n"]}