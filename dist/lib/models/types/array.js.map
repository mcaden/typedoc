{"version":3,"file":"array.js","sourceRoot":"","sources":["../../../../src/lib/models/types/array.ts"],"names":[],"mappings":";;AAAA,mCAA4D;AAS5D,MAAa,SAAU,SAAQ,YAAI;IAiB/B,YAAY,WAAiB;QACzB,KAAK,EAAE,CAAC;QARH,SAAI,GAAW,OAAO,CAAC;QAS5B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;IAOD,KAAK;QACD,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC;IAQD,MAAM,CAAC,IAAU;QACb,IAAI,CAAC,CAAC,IAAI,YAAY,SAAS,CAAC,EAAE;YAC9B,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACrD,CAAC;IAMD,QAAQ;QACJ,MAAM,MAAM,GAAQ,KAAK,CAAC,QAAQ,EAAE,CAAC;QACrC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;QAEjD,OAAO,MAAM,CAAC;IAClB,CAAC;IAKD,QAAQ;QACJ,MAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;QACnD,IAAI,IAAI,CAAC,WAAW,YAAY,iBAAS,IAAI,IAAI,CAAC,WAAW,YAAY,wBAAgB,EAAE;YACvF,OAAO,GAAG,GAAG,cAAc,GAAG,KAAK,CAAC;SACvC;aAAM;YACH,OAAO,cAAc,GAAG,IAAI,CAAC;SAChC;IACL,CAAC;CACJ;AAlED,8BAkEC","sourcesContent":["import { Type, UnionType, IntersectionType } from './index';\r\n\r\n/**\r\n * Represents an array type.\r\n *\r\n * ~~~\r\n * let value: string[];\r\n * ~~~\r\n */\r\nexport class ArrayType extends Type {\r\n\r\n    /**\r\n     * The type of the array elements.\r\n     */\r\n    elementType: Type;\r\n\r\n    /**\r\n     * The type name identifier.\r\n     */\r\n    readonly type: string = 'array';\r\n\r\n    /**\r\n     * Create a new TupleType instance.\r\n     *\r\n     * @param elementType  The type of the array's elements.\r\n     */\r\n    constructor(elementType: Type) {\r\n        super();\r\n        this.elementType = elementType;\r\n    }\r\n\r\n    /**\r\n     * Clone this type.\r\n     *\r\n     * @return A clone of this type.\r\n     */\r\n    clone(): Type {\r\n        return new ArrayType(this.elementType);\r\n    }\r\n\r\n    /**\r\n     * Test whether this type equals the given type.\r\n     *\r\n     * @param type  The type that should be checked for equality.\r\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\r\n     */\r\n    equals(type: Type): boolean {\r\n        if (!(type instanceof ArrayType)) {\r\n            return false;\r\n        }\r\n        return type.elementType.equals(this.elementType);\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this type.\r\n     * @deprecated Use serializers instead\r\n     */\r\n    toObject(): any {\r\n        const result: any = super.toObject();\r\n        result.elementType = this.elementType.toObject();\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return a string representation of this type.\r\n     */\r\n    toString() {\r\n        const elementTypeStr = this.elementType.toString();\r\n        if (this.elementType instanceof UnionType || this.elementType instanceof IntersectionType) {\r\n            return '(' + elementTypeStr + ')[]';\r\n        } else {\r\n            return elementTypeStr + '[]';\r\n        }\r\n    }\r\n}\r\n"]}