{"version":3,"file":"parameter.js","sourceRoot":"","sources":["../../../../src/lib/models/reflections/parameter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,wCAAsD;AACtD,uCAAkH;AAGlH;IAAyC,uCAAU;IAAnD;;IA+CA,CAAC;IAhCG,sCAAQ,GAAR,UAAS,QAA0B;QAC/B,IAAI,IAAI,CAAC,IAAI,YAAY,sBAAc,EAAE;YACrC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,2BAAgB,CAAC,WAAW,CAAC,CAAC;SACjE;QAED,iBAAM,QAAQ,YAAC,QAAQ,CAAC,CAAC;IAC7B,CAAC;IAMD,sCAAQ,GAAR;QACI,IAAM,MAAM,GAAG,iBAAM,QAAQ,WAAE,CAAC;QAEhC,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;SACtC;QAED,IAAI,IAAI,CAAC,YAAY,EAAE;YACnB,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;SAC3C;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAKD,sCAAQ,GAAR;QACI,OAAO,iBAAM,QAAQ,WAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAE,EAAE,CAAC,CAAC;IAC7E,CAAC;IACL,0BAAC;AAAD,CAAC,AA/CD,CAAyC,qBAAU,GA+ClD;AA/CY,kDAAmB","sourcesContent":["import { Type, ReflectionType } from '../types/index';\r\nimport { Reflection, DefaultValueContainer, TypeContainer, TraverseCallback, TraverseProperty } from './abstract';\r\nimport { SignatureReflection } from './signature';\r\n\r\nexport class ParameterReflection extends Reflection implements DefaultValueContainer, TypeContainer {\r\n    parent: SignatureReflection;\r\n\r\n    defaultValue: string;\r\n\r\n    type: Type;\r\n\r\n    /**\r\n     * Traverse all potential child reflections of this reflection.\r\n     *\r\n     * The given callback will be invoked for all children, signatures and type parameters\r\n     * attached to this reflection.\r\n     *\r\n     * @param callback  The callback function that should be applied for each child reflection.\r\n     */\r\n    traverse(callback: TraverseCallback) {\r\n        if (this.type instanceof ReflectionType) {\r\n            callback(this.type.declaration, TraverseProperty.TypeLiteral);\r\n        }\r\n\r\n        super.traverse(callback);\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this reflection.\r\n     * @deprecated Use serializers instead\r\n     */\r\n    toObject(): any {\r\n        const result = super.toObject();\r\n\r\n        if (this.type) {\r\n            result.type = this.type.toObject();\r\n        }\r\n\r\n        if (this.defaultValue) {\r\n            result.defaultValue = this.defaultValue;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return a string representation of this reflection.\r\n     */\r\n    toString() {\r\n        return super.toString() + (this.type ? ':' + this.type.toString() :  '');\r\n    }\r\n}\r\n"]}