{"version":3,"file":"signature.js","sourceRoot":"","sources":["../../../../src/lib/models/reflections/signature.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,wCAAsD;AACtD,uCAAmH;AAKnH;IAAyC,uCAAU;IAAnD;;IA4GA,CAAC;IA3EG,+CAAiB,GAAjB;QACI,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAClB,OAAO,EAAE,CAAC;SACb;QACD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAC,SAA8B,IAAK,OAAA,SAAS,CAAC,IAAI,EAAd,CAAc,CAAC,CAAC;IACnF,CAAC;IAUD,sCAAQ,GAAR,UAAS,QAA0B;QAC/B,IAAI,IAAI,CAAC,IAAI,YAAY,sBAAc,EAAE;YACrC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,2BAAgB,CAAC,WAAW,CAAC,CAAC;SACjE;QAED,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,UAAC,SAAS,IAAK,OAAA,QAAQ,CAAC,SAAS,EAAE,2BAAgB,CAAC,aAAa,CAAC,EAAnD,CAAmD,CAAC,CAAC;SAC3G;QAED,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,UAAC,SAAS,IAAK,OAAA,QAAQ,CAAC,SAAS,EAAE,2BAAgB,CAAC,UAAU,CAAC,EAAhD,CAAgD,CAAC,CAAC;SACpG;QAED,iBAAM,QAAQ,YAAC,QAAQ,CAAC,CAAC;IAC7B,CAAC;IAMD,sCAAQ,GAAR;QACI,IAAM,MAAM,GAAG,iBAAM,QAAQ,WAAE,CAAC;QAEhC,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;SACtC;QAED,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;SAClD;QAED,IAAI,IAAI,CAAC,aAAa,EAAE;YACpB,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;SACxD;QAED,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,MAAM,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;SAC9D;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAKD,sCAAQ,GAAR;QACI,IAAI,MAAM,GAAG,iBAAM,QAAQ,WAAE,CAAC;QAE9B,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,IAAM,YAAU,GAAa,EAAE,CAAC;YAChC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAC,SAAS,IAAK,OAAA,YAAU,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAA/B,CAA+B,CAAC,CAAC;YAC5E,MAAM,IAAI,GAAG,GAAG,YAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;SAC/C;QAED,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,MAAM,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;SACxC;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IACL,0BAAC;AAAD,CAAC,AA5GD,CAAyC,qBAAU,GA4GlD;AA5GY,kDAAmB","sourcesContent":["import { Type, ReflectionType } from '../types/index';\r\nimport { Reflection, TypeContainer, TypeParameterContainer, TraverseProperty, TraverseCallback } from './abstract';\r\nimport { ContainerReflection } from './container';\r\nimport { ParameterReflection } from './parameter';\r\nimport { TypeParameterReflection } from './type-parameter';\r\n\r\nexport class SignatureReflection extends Reflection implements TypeContainer, TypeParameterContainer {\r\n    parent: ContainerReflection;\r\n\r\n    parameters: ParameterReflection[];\r\n\r\n    typeParameters: TypeParameterReflection[];\r\n\r\n    type: Type;\r\n\r\n    /**\r\n     * A type that points to the reflection that has been overwritten by this reflection.\r\n     *\r\n     * Applies to interface and class members.\r\n     */\r\n    overwrites: Type;\r\n\r\n    /**\r\n     * A type that points to the reflection this reflection has been inherited from.\r\n     *\r\n     * Applies to interface and class members.\r\n     */\r\n    inheritedFrom: Type;\r\n\r\n    /**\r\n     * A type that points to the reflection this reflection is the implementation of.\r\n     *\r\n     * Applies to class members.\r\n     */\r\n    implementationOf: Type;\r\n\r\n    /**\r\n     * Return an array of the parameter types.\r\n     */\r\n    getParameterTypes(): Type[] {\r\n        if (!this.parameters) {\r\n            return [];\r\n        }\r\n        return this.parameters.map((parameter: ParameterReflection) => parameter.type);\r\n    }\r\n\r\n    /**\r\n     * Traverse all potential child reflections of this reflection.\r\n     *\r\n     * The given callback will be invoked for all children, signatures and type parameters\r\n     * attached to this reflection.\r\n     *\r\n     * @param callback  The callback function that should be applied for each child reflection.\r\n     */\r\n    traverse(callback: TraverseCallback) {\r\n        if (this.type instanceof ReflectionType) {\r\n            callback(this.type.declaration, TraverseProperty.TypeLiteral);\r\n        }\r\n\r\n        if (this.typeParameters) {\r\n            this.typeParameters.slice().forEach((parameter) => callback(parameter, TraverseProperty.TypeParameter));\r\n        }\r\n\r\n        if (this.parameters) {\r\n            this.parameters.slice().forEach((parameter) => callback(parameter, TraverseProperty.Parameters));\r\n        }\r\n\r\n        super.traverse(callback);\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this reflection.\r\n     * @deprecated Use serializers instead\r\n     */\r\n    toObject(): any {\r\n        const result = super.toObject();\r\n\r\n        if (this.type) {\r\n            result.type = this.type.toObject();\r\n        }\r\n\r\n        if (this.overwrites) {\r\n            result.overwrites = this.overwrites.toObject();\r\n        }\r\n\r\n        if (this.inheritedFrom) {\r\n            result.inheritedFrom = this.inheritedFrom.toObject();\r\n        }\r\n\r\n        if (this.implementationOf) {\r\n            result.implementationOf = this.implementationOf.toObject();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return a string representation of this reflection.\r\n     */\r\n    toString(): string {\r\n        let result = super.toString();\r\n\r\n        if (this.typeParameters) {\r\n            const parameters: string[] = [];\r\n            this.typeParameters.forEach((parameter) => parameters.push(parameter.name));\r\n            result += '<' + parameters.join(', ') + '>';\r\n        }\r\n\r\n        if (this.type) {\r\n            result += ':' + this.type.toString();\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"]}