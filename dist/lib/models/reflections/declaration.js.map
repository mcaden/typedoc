{"version":3,"file":"declaration.js","sourceRoot":"","sources":["../../../../src/lib/models/reflections/declaration.ts"],"names":[],"mappings":"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","sourcesContent":["import { DefaultValueContainer, TypeContainer, TypeParameterContainer, TraverseCallback, TraverseProperty } from './abstract';\r\nimport { Type, ReflectionType } from '../types/index';\r\nimport { ContainerReflection } from './container';\r\nimport { SignatureReflection } from './signature';\r\nimport { TypeParameterReflection } from './type-parameter';\r\n\r\n/**\r\n * Stores hierarchical type data.\r\n *\r\n * @see [[DeclarationReflection.typeHierarchy]]\r\n */\r\nexport interface DeclarationHierarchy {\r\n    /**\r\n     * The types represented by this node in the hierarchy.\r\n     */\r\n    types: Type[];\r\n\r\n    /**\r\n     * The next hierarchy level.\r\n     */\r\n    next?: DeclarationHierarchy;\r\n\r\n    /**\r\n     * Is this the entry containing the target type?\r\n     */\r\n    isTarget?: boolean;\r\n}\r\n\r\n/**\r\n * A reflection that represents a single declaration emitted by the TypeScript compiler.\r\n *\r\n * All parts of a project are represented by DeclarationReflection instances. The actual\r\n * kind of a reflection is stored in its ´kind´ member.\r\n */\r\nexport class DeclarationReflection extends ContainerReflection implements DefaultValueContainer, TypeContainer, TypeParameterContainer {\r\n    /**\r\n     * The type of the reflection.\r\n     *\r\n     * If the reflection represents a variable or a property, this is the value type.<br />\r\n     * If the reflection represents a signature, this is the return type.\r\n     */\r\n    type: Type;\r\n\r\n    typeParameters: TypeParameterReflection[];\r\n\r\n    /**\r\n     * A list of call signatures attached to this declaration.\r\n     *\r\n     * TypeDoc creates one declaration per function that may contain ore or more\r\n     * signature reflections.\r\n     */\r\n    signatures: SignatureReflection[];\r\n\r\n    /**\r\n     * The index signature of this declaration.\r\n     */\r\n    indexSignature: SignatureReflection;\r\n\r\n    /**\r\n     * The get signature of this declaration.\r\n     */\r\n    getSignature: SignatureReflection;\r\n\r\n    /**\r\n     * The set signature of this declaration.\r\n     */\r\n    setSignature: SignatureReflection;\r\n\r\n    /**\r\n     * The default value of this reflection.\r\n     *\r\n     * Applies to function parameters.\r\n     */\r\n    defaultValue: string;\r\n\r\n    /**\r\n     * A type that points to the reflection that has been overwritten by this reflection.\r\n     *\r\n     * Applies to interface and class members.\r\n     */\r\n    overwrites: Type;\r\n\r\n    /**\r\n     * A type that points to the reflection this reflection has been inherited from.\r\n     *\r\n     * Applies to interface and class members.\r\n     */\r\n    inheritedFrom: Type;\r\n\r\n    /**\r\n     * A type that points to the reflection this reflection is the implementation of.\r\n     *\r\n     * Applies to class members.\r\n     */\r\n    implementationOf: Type;\r\n\r\n    /**\r\n     * A list of all types this reflection extends (e.g. the parent classes).\r\n     */\r\n    extendedTypes: Type[];\r\n\r\n    /**\r\n     * A list of all types that extend this reflection (e.g. the subclasses).\r\n     */\r\n    extendedBy: Type[];\r\n\r\n    /**\r\n     * A list of all types this reflection implements.\r\n     */\r\n    implementedTypes: Type[];\r\n\r\n    /**\r\n     * A list of all types that implement this reflection.\r\n     */\r\n    implementedBy: Type[];\r\n\r\n    /**\r\n     * Contains a simplified representation of the type hierarchy suitable for being\r\n     * rendered in templates.\r\n     */\r\n    typeHierarchy: DeclarationHierarchy;\r\n\r\n    hasGetterOrSetter(): boolean {\r\n        return !!this.getSignature || !!this.setSignature;\r\n    }\r\n\r\n    getAllSignatures(): SignatureReflection[] {\r\n        let result: SignatureReflection[] = [];\r\n\r\n        if (this.signatures) {\r\n            result = result.concat(this.signatures);\r\n        }\r\n        if (this.indexSignature) {\r\n            result.push(this.indexSignature);\r\n        }\r\n        if (this.getSignature) {\r\n            result.push(this.getSignature);\r\n        }\r\n        if (this.setSignature) {\r\n            result.push(this.setSignature);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Traverse all potential child reflections of this reflection.\r\n     *\r\n     * The given callback will be invoked for all children, signatures and type parameters\r\n     * attached to this reflection.\r\n     *\r\n     * @param callback  The callback function that should be applied for each child reflection.\r\n     */\r\n    traverse(callback: TraverseCallback) {\r\n        if (this.typeParameters) {\r\n            this.typeParameters.slice().forEach((parameter) => callback(parameter, TraverseProperty.TypeParameter));\r\n        }\r\n\r\n        if (this.type instanceof ReflectionType) {\r\n            callback(this.type.declaration, TraverseProperty.TypeLiteral);\r\n        }\r\n\r\n        if (this.signatures) {\r\n            this.signatures.slice().forEach((signature) => callback(signature, TraverseProperty.Signatures));\r\n        }\r\n\r\n        if (this.indexSignature) {\r\n            callback(this.indexSignature, TraverseProperty.IndexSignature);\r\n        }\r\n\r\n        if (this.getSignature) {\r\n            callback(this.getSignature, TraverseProperty.GetSignature);\r\n        }\r\n\r\n        if (this.setSignature) {\r\n            callback(this.setSignature, TraverseProperty.SetSignature);\r\n        }\r\n\r\n        super.traverse(callback);\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this reflection.\r\n     * @deprecated Use serializers instead\r\n     */\r\n    toObject(): any {\r\n        let result = super.toObject();\r\n\r\n        if (this.type) {\r\n            result.type = this.type.toObject();\r\n        }\r\n\r\n        if (this.defaultValue) {\r\n            result.defaultValue = this.defaultValue;\r\n        }\r\n\r\n        if (this.overwrites) {\r\n            result.overwrites = this.overwrites.toObject();\r\n        }\r\n\r\n        if (this.inheritedFrom) {\r\n            result.inheritedFrom = this.inheritedFrom.toObject();\r\n        }\r\n\r\n        if (this.extendedTypes) {\r\n            result.extendedTypes = this.extendedTypes.map((t) => t.toObject());\r\n        }\r\n\r\n        if (this.extendedBy) {\r\n            result.extendedBy = this.extendedBy.map((t) => t.toObject());\r\n        }\r\n\r\n        if (this.implementedTypes) {\r\n            result.implementedTypes = this.implementedTypes.map((t) => t.toObject());\r\n        }\r\n\r\n        if (this.implementedBy) {\r\n            result.implementedBy = this.implementedBy.map((t) => t.toObject());\r\n        }\r\n\r\n        if (this.implementationOf) {\r\n            result.implementationOf = this.implementationOf.toObject();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return a string representation of this reflection.\r\n     */\r\n    toString(): string {\r\n        let result = super.toString();\r\n\r\n        if (this.typeParameters) {\r\n            const parameters: string[] = [];\r\n            this.typeParameters.forEach((parameter) => {\r\n                parameters.push(parameter.name);\r\n            });\r\n            result += '<' + parameters.join(', ') + '>';\r\n        }\r\n\r\n        if (this.type) {\r\n            result += ':' + this.type.toString();\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"]}