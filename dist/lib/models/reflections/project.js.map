{"version":3,"file":"project.js","sourceRoot":"","sources":["../../../../src/lib/models/reflections/project.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,0CAA+D;AAC/D,uCAAwD;AACxD,yCAAkD;AASlD;IAAuC,qCAAmB;IA6CtD,2BAAY,IAAY;QAAxB,YACI,kBAAM,IAAI,EAAE,IAAI,EAAE,yBAAc,CAAC,MAAM,CAAC,SAC3C;QA3CD,iBAAW,GAA+B,EAAE,CAAC;QAE7C,mBAAa,GAAiC,EAAE,CAAC;QAKjD,eAAS,GAAoB,IAAI,uBAAe,EAAE,CAAC;QAKnD,WAAK,GAAiB,EAAE,CAAC;;IA+BzB,CAAC;IAKD,qCAAS,GAAT;QACI,OAAO,IAAI,CAAC;IAChB,CAAC;IAQD,gDAAoB,GAApB,UAAqB,IAAoB;QACrC,IAAM,MAAM,GAAiB,EAAE,CAAC;QAChC,KAAK,IAAI,EAAE,IAAI,IAAI,CAAC,WAAW,EAAE;YAC7B,IAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YACxC,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;gBACzB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aAC3B;SACJ;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAiBD,gDAAoB,GAApB,UAAqB,GAAQ;QACzB,IAAM,KAAK,GAAa,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAClE,IAAM,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QAEzB,MAAM,EAAE,KAAK,IAAI,GAAG,IAAI,IAAI,CAAC,WAAW,EAAE;YACtC,IAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACzC,IAAI,UAAU,CAAC,IAAI,KAAK,IAAI,EAAE;gBAC1B,SAAS;aACZ;YAED,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;YAC7B,IAAI,MAAM,GAAG,UAAU,CAAC;YACxB,OAAO,MAAM,IAAI,KAAK,IAAI,CAAC,EAAE;gBACzB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;gBACvB,IAAI,MAAM,CAAC,IAAI,KAAK,KAAK,CAAC,KAAK,CAAC,EAAE;oBAC9B,SAAS,MAAM,CAAC;iBACnB;gBACD,KAAK,IAAI,CAAC,CAAC;aACd;YAED,OAAO,UAAU,CAAC;SACrB;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAMD,oCAAQ,GAAR;QACI,IAAM,MAAM,GAAG,iBAAM,QAAQ,WAAE,CAAC;QAEhC,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAM,YAAU,GAAU,EAAE,CAAC;YAC7B,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,QAAQ;gBAC7B,YAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;YAEH,IAAI,YAAU,CAAC,MAAM,GAAG,CAAC,EAAE;gBACvB,MAAM,CAAC,YAAY,CAAC,GAAG,YAAU,CAAC;aACrC;SACJ;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IACL,wBAAC;AAAD,CAAC,AAvID,CAAuC,+BAAmB,GAuIzD;AAvIY,8CAAiB","sourcesContent":["import { SourceFile, SourceDirectory } from '../sources/index';\r\nimport { Reflection, ReflectionKind } from './abstract';\r\nimport { ContainerReflection } from './container';\r\nimport { ReflectionCategory } from '../ReflectionCategory';\r\n\r\n/**\r\n * A reflection that represents the root of the project.\r\n *\r\n * The project reflection acts as a global index, one may receive all reflections\r\n * and source files of the processed project through this reflection.\r\n */\r\nexport class ProjectReflection extends ContainerReflection {\r\n    /**\r\n     * A list of all reflections within the project.\r\n     */\r\n    reflections: {[id: number]: Reflection} = {};\r\n\r\n    symbolMapping: {[symbolId: number]: number} = {};\r\n\r\n    /**\r\n     * The root directory of the project.\r\n     */\r\n    directory: SourceDirectory = new SourceDirectory();\r\n\r\n    /**\r\n     * A list of all source files within the project.\r\n     */\r\n    files: SourceFile[] = [];\r\n\r\n    /**\r\n     * All reflections categorized.\r\n     */\r\n    categories: ReflectionCategory[];\r\n\r\n    /**\r\n     * The name of the project.\r\n     *\r\n     * The name can be passed as a commandline argument or it is read from the package info.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * The contents of the readme.md file of the project when found.\r\n     */\r\n    readme: string;\r\n\r\n    /**\r\n     * The parsed data of the package.json file of the project when found.\r\n     */\r\n    packageInfo: any;\r\n\r\n    /**\r\n     * Create a new ProjectReflection instance.\r\n     *\r\n     * @param name  The name of the project.\r\n     */\r\n    constructor(name: string) {\r\n        super(null, name, ReflectionKind.Global);\r\n    }\r\n\r\n    /**\r\n     * Return whether this reflection is the root / project reflection.\r\n     */\r\n    isProject(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Return a list of all reflections in this project of a certain kind.\r\n     *\r\n     * @param kind  The desired kind of reflection.\r\n     * @returns     An array containing all reflections with the desired kind.\r\n     */\r\n    getReflectionsByKind(kind: ReflectionKind): Reflection[] {\r\n        const values: Reflection[] = [];\r\n        for (let id in this.reflections) {\r\n            const reflection = this.reflections[id];\r\n            if (reflection.kindOf(kind)) {\r\n                values.push(reflection);\r\n            }\r\n        }\r\n\r\n        return values;\r\n    }\r\n\r\n    /**\r\n     * @param name  The name to look for. Might contain a hierarchy.\r\n     */\r\n    findReflectionByName(name: string): Reflection;\r\n\r\n    /**\r\n     * @param names  The name hierarchy to look for.\r\n     */\r\n    findReflectionByName(names: string[]): Reflection;\r\n\r\n    /**\r\n     * Try to find a reflection by its name.\r\n     *\r\n     * @return The found reflection or null.\r\n     */\r\n    findReflectionByName(arg: any): Reflection {\r\n        const names: string[] = Array.isArray(arg) ? arg : arg.split('.');\r\n        const name = names.pop();\r\n\r\n        search: for (let key in this.reflections) {\r\n            const reflection = this.reflections[key];\r\n            if (reflection.name !== name) {\r\n                continue;\r\n            }\r\n\r\n            let depth = names.length - 1;\r\n            let target = reflection;\r\n            while (target && depth >= 0) {\r\n                target = target.parent;\r\n                if (target.name !== names[depth]) {\r\n                    continue search;\r\n                }\r\n                depth -= 1;\r\n            }\r\n\r\n            return reflection;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this reflection.\r\n     * @deprecated Use serializers instead\r\n     */\r\n    toObject(): any {\r\n        const result = super.toObject();\r\n\r\n        if (this.categories) {\r\n            const categories: any[] = [];\r\n            this.categories.forEach((category) => {\r\n                categories.push(category.toObject());\r\n            });\r\n\r\n            if (categories.length > 0) {\r\n                result['categories'] = categories;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"]}