{"version":3,"file":"type-parameter.js","sourceRoot":"","sources":["../../../../src/lib/models/reflections/type-parameter.ts"],"names":[],"mappings":";;AACA,yCAAuE;AAGvE,MAAa,uBAAwB,SAAQ,qBAAU;IAQnD,YAAY,IAAuB,EAAE,MAAmB;QACpD,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,yBAAc,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;QACvD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;IAChC,CAAC;IAMD,QAAQ;QACJ,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAEhC,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;SACtC;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ;AA1BD,0DA0BC","sourcesContent":["import { Type, TypeParameterType } from '../types/index';\r\nimport { Reflection, ReflectionKind, TypeContainer } from './abstract';\r\nimport { DeclarationReflection } from './declaration';\r\n\r\nexport class TypeParameterReflection extends Reflection implements TypeContainer {\r\n    parent?: DeclarationReflection;\r\n\r\n    type?: Type;\r\n\r\n    /**\r\n     * Create a new TypeParameterReflection instance.\r\n     */\r\n    constructor(type: TypeParameterType, parent?: Reflection) {\r\n        super(type.name, ReflectionKind.TypeParameter, parent);\r\n        this.type = type.constraint;\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this reflection.\r\n     * @deprecated Use serializers instead\r\n     */\r\n    toObject(): any {\r\n        const result = super.toObject();\r\n\r\n        if (this.type) {\r\n            result.type = this.type.toObject();\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"]}