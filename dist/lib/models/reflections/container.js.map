{"version":3,"file":"container.js","sourceRoot":"","sources":["../../../../src/lib/models/reflections/container.ts"],"names":[],"mappings":";;AAAA,yCAA4F;AAK5F,MAAa,mBAAoB,SAAQ,qBAAU;IAsB/C,iBAAiB,CAAC,IAAoB;QAClC,OAAO,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACrE,CAAC;IAUD,QAAQ,CAAC,QAA0B;QAC/B,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,CAAC,KAA4B,EAAE,EAAE;gBAC3D,QAAQ,CAAC,KAAK,EAAE,2BAAgB,CAAC,QAAQ,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAMD,QAAQ;QACJ,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAEhC,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,MAAM,MAAM,GAAU,EAAE,CAAC;YACzB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC1B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;SAC7B;QAED,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,MAAM,UAAU,GAAU,EAAE,CAAC;YAC7B,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACjC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;YAEH,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;gBACvB,MAAM,CAAC,YAAY,CAAC,GAAG,UAAU,CAAC;aACrC;SACJ;QAED,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,MAAM,OAAO,GAAU,EAAE,CAAC;YAC1B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBAC5B,OAAO,CAAC,IAAI,CAAC;oBACX,QAAQ,EAAE,MAAM,CAAC,QAAQ;oBACzB,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,SAAS,EAAE,MAAM,CAAC,SAAS;iBAC5B,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;SAC7B;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ;AApFD,kDAoFC","sourcesContent":["import { Reflection, ReflectionKind, TraverseCallback, TraverseProperty } from './abstract';\r\nimport { ReflectionCategory } from '../ReflectionCategory';\r\nimport { ReflectionGroup } from '../ReflectionGroup';\r\nimport { DeclarationReflection } from './declaration';\r\n\r\nexport class ContainerReflection extends Reflection {\r\n    /**\r\n     * The children of this reflection.\r\n     */\r\n    children?: DeclarationReflection[];\r\n\r\n    /**\r\n     * All children grouped by their kind.\r\n     */\r\n    groups?: ReflectionGroup[];\r\n\r\n    /**\r\n     * All children grouped by their category.\r\n     */\r\n    categories?: ReflectionCategory[];\r\n\r\n    /**\r\n     * Return a list of all children of a certain kind.\r\n     *\r\n     * @param kind  The desired kind of children.\r\n     * @returns     An array containing all children with the desired kind.\r\n     */\r\n    getChildrenByKind(kind: ReflectionKind): DeclarationReflection[] {\r\n        return (this.children || []).filter(child => child.kindOf(kind));\r\n    }\r\n\r\n    /**\r\n     * Traverse all potential child reflections of this reflection.\r\n     *\r\n     * The given callback will be invoked for all children, signatures and type parameters\r\n     * attached to this reflection.\r\n     *\r\n     * @param callback  The callback function that should be applied for each child reflection.\r\n     */\r\n    traverse(callback: TraverseCallback) {\r\n        if (this.children) {\r\n            this.children.slice().forEach((child: DeclarationReflection) => {\r\n                callback(child, TraverseProperty.Children);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return a raw object representation of this reflection.\r\n     * @deprecated Use serializers instead\r\n     */\r\n    toObject(): any {\r\n        const result = super.toObject();\r\n\r\n        if (this.groups) {\r\n            const groups: any[] = [];\r\n            this.groups.forEach((group) => {\r\n                groups.push(group.toObject());\r\n            });\r\n\r\n            result['groups'] = groups;\r\n        }\r\n\r\n        if (this.categories) {\r\n            const categories: any[] = [];\r\n            this.categories.forEach((category) => {\r\n                categories.push(category.toObject());\r\n            });\r\n\r\n            if (categories.length > 0) {\r\n                result['categories'] = categories;\r\n            }\r\n        }\r\n\r\n        if (this.sources) {\r\n          const sources: any[] = [];\r\n          this.sources.forEach((source) => {\r\n              sources.push({\r\n                fileName: source.fileName,\r\n                line: source.line,\r\n                character: source.character\r\n              });\r\n          });\r\n\r\n          result['sources'] = sources;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"]}