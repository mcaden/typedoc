{"version":3,"file":"templates.js","sourceRoot":"","sources":["../../../../../src/lib/output/utils/resources/templates.ts"],"names":[],"mappings":";;AAAA,yCAAyC;AAEzC,0CAA6C;AAC7C,mCAAkD;AAElD,MAAa,QAAS,SAAQ,gBAAQ;IAGlC,WAAW;QACP,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,MAAM,GAAG,GAAG,aAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACpC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE;gBACpC,aAAa,EAAE,IAAI;aACtB,CAAC,CAAC;SACN;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED,MAAM,CAAC,OAAY,EAAE,OAAa;QAC9B,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QACpC,OAAO,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;CACJ;AAlBD,4BAkBC;AAED,MAAa,aAAc,SAAQ,qBAAuB;IACtD;QACI,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC9B,CAAC;CACJ;AAJD,sCAIC;AAED,MAAa,YAAa,SAAQ,aAAa;IAA/C;;QACY,oBAAe,GAAa,EAAE,CAAC;IAkC3C,CAAC;IAhCG,QAAQ;QACJ,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE;YACnB,OAAO,KAAK,CAAC;SAChB;QACD,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAEzC,KAAK,IAAI,IAAI,IAAI,SAAS,EAAE;YACxB,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC3C,SAAS;aACZ;YACD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEhC,MAAM,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;YAChC,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;YACvC,UAAU,CAAC,eAAe,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;SAC9C;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,UAAU;QACN,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE;YACrB,OAAO,KAAK,CAAC;SAChB;QAED,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,eAAe,EAAE;YACnC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;SACtC;QAED,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AAnCD,oCAmCC","sourcesContent":["import * as Handlebars from 'handlebars';\r\n\r\nimport { readFile } from '../../../utils/fs';\r\nimport { ResourceStack, Resource } from './stack';\r\n\r\nexport class Template extends Resource {\r\n    private template?: HandlebarsTemplateDelegate;\r\n\r\n    getTemplate(): HandlebarsTemplateDelegate {\r\n        if (!this.template) {\r\n            const raw = readFile(this.fileName);\r\n            this.template = Handlebars.compile(raw, {\r\n                preventIndent: true\r\n            });\r\n        }\r\n\r\n        return this.template;\r\n    }\r\n\r\n    render(context: any, options?: any): string {\r\n        const template = this.getTemplate();\r\n        return template(context, options);\r\n    }\r\n}\r\n\r\nexport class TemplateStack extends ResourceStack<Template> {\r\n    constructor() {\r\n        super(Template, /\\.hbs$/);\r\n    }\r\n}\r\n\r\nexport class PartialStack extends TemplateStack {\r\n    private registeredNames: string[] = [];\r\n\r\n    activate(): boolean {\r\n        if (!super.activate()) {\r\n            return false;\r\n        }\r\n        const resources = this.getAllResources();\r\n\r\n        for (let name in resources) {\r\n            if (this.registeredNames.indexOf(name) !== -1) {\r\n                continue;\r\n            }\r\n            this.registeredNames.push(name);\r\n\r\n            const partial = resources[name];\r\n            const template = partial.getTemplate();\r\n            Handlebars.registerPartial(name, template);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    deactivate(): boolean {\r\n        if (!super.deactivate()) {\r\n            return false;\r\n        }\r\n\r\n        for (let name of this.registeredNames) {\r\n            Handlebars.unregisterPartial(name);\r\n        }\r\n\r\n        this.registeredNames = [];\r\n        return true;\r\n    }\r\n}\r\n"]}