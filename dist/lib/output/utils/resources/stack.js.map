{"version":3,"file":"stack.js","sourceRoot":"","sources":["../../../../../src/lib/output/utils/resources/stack.ts"],"names":[],"mappings":"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","sourcesContent":["import * as FS from 'fs';\r\nimport * as Path from 'path';\r\nimport * as Util from 'util';\r\n\r\nexport interface ResourceClass<T extends Resource> extends Function {\r\n    new (origin: ResourceOrigin<T>, name: string, fileName: string): T;\r\n}\r\n\r\nexport interface ResourceMap<T extends Resource> {\r\n    [name: string]: T;\r\n}\r\n\r\n/**\r\n * Normalize the given template name.\r\n */\r\nfunction normalizeName(name: string): string {\r\n    return name.replace('\\\\', '/').replace(/\\.\\w+$/, '');\r\n}\r\n\r\nexport abstract class Resource {\r\n    protected origin: ResourceOrigin<any>;\r\n\r\n    protected name: string;\r\n\r\n    protected fileName: string;\r\n\r\n    constructor(origin: ResourceOrigin<any>, name: string, fileName: string) {\r\n        this.origin   = origin;\r\n        this.name     = name;\r\n        this.fileName = fileName;\r\n    }\r\n\r\n    getName(): string {\r\n        return this.name;\r\n    }\r\n}\r\n\r\nexport class ResourceOrigin<T extends Resource> {\r\n    private stack: ResourceStack<T>;\r\n\r\n    private name: string;\r\n\r\n    private path: string;\r\n\r\n    private resources: ResourceMap<T> = {};\r\n\r\n    constructor(stack: ResourceStack<T>, name: string, path: string) {\r\n        this.stack = stack;\r\n        this.name  = name;\r\n        this.path  = path;\r\n\r\n        this.findResources();\r\n    }\r\n\r\n    mergeResources(target: ResourceMap<T>) {\r\n        const resources = this.resources;\r\n        for (let name in resources) {\r\n            if (name in target) {\r\n                continue;\r\n            }\r\n            target[name] = resources[name];\r\n        }\r\n    }\r\n\r\n    hasResource(name: string): boolean {\r\n        return name in this.resources;\r\n    }\r\n\r\n    getResource(name: string): T | undefined {\r\n        return this.resources[name];\r\n    }\r\n\r\n    getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    private findResources(dir?: string) {\r\n        const resourceClass   = this.stack.getResourceClass();\r\n        const resourceRegExp = this.stack.getResourceRegExp();\r\n        let path = this.path;\r\n        if (dir) {\r\n            path = Path.join(path, dir);\r\n        }\r\n\r\n        for (let fileName of FS.readdirSync(path)) {\r\n            const fullName = Path.join(path, fileName);\r\n\r\n            if (FS.statSync(fullName).isDirectory()) {\r\n                this.findResources(dir ? Path.join(dir, fileName) : fileName);\r\n            } else if (resourceRegExp.test(fileName)) {\r\n                const name: string = normalizeName(dir ? Path.join(dir, fileName) : fileName);\r\n                this.resources[name] = new resourceClass(this, name, fullName);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport abstract class ResourceStack<T extends Resource> {\r\n    private isActive = false;\r\n\r\n    private resourceClass: ResourceClass<T>;\r\n\r\n    private resourceRegExp: RegExp;\r\n\r\n    /**\r\n     * A list of all source directories.\r\n     */\r\n    private origins: ResourceOrigin<T>[] = [];\r\n\r\n    constructor(resourceClass: ResourceClass<T>, resourceRegExp?: RegExp) {\r\n        this.resourceClass  = resourceClass;\r\n        this.resourceRegExp = resourceRegExp || /.*/;\r\n    }\r\n\r\n    activate(): boolean {\r\n        if (this.isActive) {\r\n            return false;\r\n        }\r\n        this.isActive = true;\r\n        return true;\r\n    }\r\n\r\n    deactivate(): boolean {\r\n        if (!this.isActive) {\r\n            return false;\r\n        }\r\n        this.isActive = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Return a resource by its name.\r\n     */\r\n    getResource(name: string): T | undefined {\r\n        const normalizedName = normalizeName(name);\r\n        let index = this.origins.length - 1;\r\n\r\n        while (index >= 0) {\r\n            const origin = this.origins[index--];\r\n            if (origin.hasResource(normalizedName)) {\r\n                return origin.getResource(normalizedName);\r\n            }\r\n        }\r\n\r\n        throw new Error(Util.format('Cannot find resource `%s`.', name));\r\n    }\r\n\r\n    getAllResources(): ResourceMap<T> {\r\n        const resources: ResourceMap<T> = {};\r\n        let index = this.origins.length - 1;\r\n\r\n        while (index >= 0) {\r\n            this.origins[index--].mergeResources(resources);\r\n        }\r\n\r\n        return resources;\r\n    }\r\n\r\n    getResourceClass(): ResourceClass<T> {\r\n        return this.resourceClass;\r\n    }\r\n\r\n    getResourceRegExp(): RegExp {\r\n        return this.resourceRegExp;\r\n    }\r\n\r\n    getOrigin(name: string): ResourceOrigin<T> | undefined {\r\n        for (let origin of this.origins) {\r\n            if (origin.getName() === name) {\r\n                return origin;\r\n            }\r\n        }\r\n    }\r\n\r\n    hasOrigin(name: string): boolean {\r\n        return !!this.getOrigin(name);\r\n    }\r\n\r\n    /**\r\n     * Add a source directory to the resource stack.\r\n     */\r\n    addOrigin(name: string, path: string, ignoreErrors?: boolean) {\r\n        if (this.isActive) {\r\n            throw new Error('Cannot add origins while the resource is active.');\r\n        }\r\n\r\n        if (this.hasOrigin(name)) {\r\n            throw new Error(Util.format('The origin `%s` is already registered.', name));\r\n        }\r\n\r\n        path = Path.resolve(path);\r\n        if (!FS.existsSync(path)) {\r\n            if (!ignoreErrors) {\r\n                throw new Error(Util.format('The resource path `%s` does not exist.', path));\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (!FS.statSync(path).isDirectory()) {\r\n            if (!ignoreErrors) {\r\n                throw new Error(Util.format('The resource path `%s` is not a directory.', path));\r\n            }\r\n            return;\r\n        }\r\n\r\n        this.origins.push(new ResourceOrigin<T>(this, name, path));\r\n    }\r\n\r\n    removeOrigin(name: string) {\r\n        if (this.isActive) {\r\n            throw new Error('Cannot remove origins while the resource is active.');\r\n        }\r\n\r\n        let index = 0, count = this.origins.length;\r\n        while (index < count) {\r\n            const origin = this.origins[index];\r\n            if (origin.getName() === name) {\r\n                this.origins.splice(index, 1);\r\n                count -= 1;\r\n            } else {\r\n                index += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    removeAllOrigins() {\r\n        if (this.isActive) {\r\n            throw new Error('Cannot remove origins while the resource is active.');\r\n        }\r\n\r\n        this.origins = [];\r\n    }\r\n}\r\n"]}