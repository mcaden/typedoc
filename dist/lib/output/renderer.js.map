{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../../../src/lib/output/renderer.ts"],"names":[],"mappings":";;;;;;;;;AASA,6BAA6B;AAC7B,+BAA+B;AAE/B,MAAM,WAAW,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAIxC,qCAAoD;AAGpD,oCAAwC;AACxC,wDAAqD;AACrD,6CAAiD;AACjD,kDAA2E;AAC3E,8DAA6D;AAkC7D,IAAa,QAAQ,gBAArB,MAAa,QAAS,SAAQ,8BAAkD;IA4D5E,UAAU;IACV,CAAC;IAQD,MAAM,CAAC,OAA0B,EAAE,eAAuB;QACtD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,EAAE;YACvE,OAAO;SACV;QAED,MAAM,MAAM,GAAG,IAAI,sBAAa,CAAC,sBAAa,CAAC,KAAK,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;QAChF,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;QAC1D,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,KAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAE3C,MAAM,GAAG,GAAG,IAAI,WAAW,CAAC,2BAA2B,EAAE;YACrD,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM;YACzB,KAAK,EAAE,EAAE;SACZ,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACrB,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE;YAC5B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAmB,EAAE,EAAE;gBACxC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;gBACrD,GAAG,CAAC,IAAI,EAAE,CAAC;YACf,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,OAAO,CAAC,sBAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;SAC3C;IACL,CAAC;IAQO,cAAc,CAAC,IAAe;QAClC,IAAI,CAAC,OAAO,CAAC,kBAAS,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACpC,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,OAAO,KAAK,CAAC;SAChB;QAGD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAM,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAE,CAAC,WAAW,EAAE,CAAC;QAC/G,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAEpC,IAAI,CAAC,OAAO,CAAC,kBAAS,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAClC,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,OAAO,KAAK,CAAC;SAChB;QAED,IAAI;YACA,cAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;SAClD;QAAC,OAAO,KAAK,EAAE;YACZ,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACnE,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAUO,YAAY;QAChB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACb,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YACjC,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACnC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBACtB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,UAAQ,CAAC,iBAAiB,EAAE,EAAE,SAAS,CAAC,CAAC;gBAC1D,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;oBACtB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,SAAS,CAAC,CAAC;oBAC7E,OAAO,KAAK,CAAC;iBAChB;aACJ;YAED,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YAC7C,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;gBAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,2BAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;aACzE;iBAAM;gBACH,IAAI;oBACA,MAAM,UAAU,GAAG,OAAO,OAAO,CAAC,QAAQ,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC;oBAE3G,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;iBACzE;gBAAC,OAAO,GAAG,EAAE;oBACV,MAAM,IAAI,KAAK,CACX,4BAA4B,QAAQ,4EAA4E;wBAChH,GAAG,CACN,CAAC;iBACL;aACJ;SACJ;QAED,IAAI,CAAC,KAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;QACjC,OAAO,IAAI,CAAC;IAChB,CAAC;IASO,sBAAsB,CAAC,SAAiB;QAC5C,IAAI,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;YAC1B,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,EAAE;gBACvC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CACzB,0DAA0D,EAC1D,SAAS,CAAC,CAAC;gBACf,OAAO,KAAK,CAAC;aAChB;YAED,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBACzB,OAAO,IAAI,CAAC;aACf;YAED,IAAI,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxC,OAAO,IAAI,CAAC;aACf;YAGD,IAAI,CAAC,IAAI,CAAC,KAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE;gBAC3C,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CACzB,kGAAkG;oBAClG,oFAAoF,EACpF,SAAS,CAAC,CAAC;gBACf,OAAO,KAAK,CAAC;aAChB;YAED,IAAI;gBACA,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;aAC5B;YAAC,OAAO,KAAK,EAAE;gBACZ,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;aACzE;SACJ;QAED,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;YAC3B,IAAI;gBACA,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;aAC5B;YAAC,OAAO,KAAK,EAAE;gBACZ,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,sCAAsC,EAAE,SAAS,CAAC,CAAC;gBACjF,OAAO,KAAK,CAAC;aAChB;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAOD,MAAM,CAAC,iBAAiB;QACpB,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC,CAAC;IACnE,CAAC;IAOD,MAAM,CAAC,eAAe;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC,UAAQ,CAAC,iBAAiB,EAAE,EAAE,SAAS,CAAC,CAAC;IAC9D,CAAC;CACJ,CAAA;AA/NG;IANC,kBAAM,CAAC;QACJ,IAAI,EAAE,OAAO;QACb,IAAI,EAAE,yGAAyG;QAC/G,IAAI,EAAE,2BAAa,CAAC,MAAM;QAC1B,YAAY,EAAE,SAAS;KAC1B,CAAC;2CACiB;AAOnB;IALC,kBAAM,CAAC;QACJ,IAAI,EAAE,oBAAoB;QAC1B,IAAI,EAAE,0EAA0E;QAChF,IAAI,EAAE,2BAAa,CAAC,OAAO;KAC9B,CAAC;oDAC2B;AAM7B;IAJC,kBAAM,CAAC;QACJ,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,kEAAkE;KAC3E,CAAC;sCACY;AAOd;IALC,kBAAM,CAAC;QACJ,IAAI,EAAE,QAAQ;QACd,IAAI,EAAE,6DAA6D;QACnE,YAAY,EAAE,MAAM;KACvB,CAAC;wCACc;AAOhB;IALC,kBAAM,CAAC;QACJ,IAAI,EAAE,eAAe;QACrB,IAAI,EAAE,uDAAuD;QAC7D,IAAI,EAAE,2BAAa,CAAC,OAAO;KAC9B,CAAC;+CACsB;AAOxB;IALC,kBAAM,CAAC;QACJ,IAAI,EAAE,YAAY;QAClB,IAAI,EAAE,sFAAsF;QAC5F,IAAI,EAAE,2BAAa,CAAC,MAAM;KAC7B,CAAC;4CACkB;AAOpB;IALC,kBAAM,CAAC;QACJ,IAAI,EAAE,KAAK;QACX,IAAI,EAAE,4CAA4C;QAClD,IAAI,EAAE,2BAAa,CAAC,KAAK;KAC5B,CAAC;qCACa;AArDN,QAAQ;IADpB,qBAAS,CAAC,EAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,8BAAiB,EAAC,CAAC;GAChE,QAAQ,CA2OpB;AA3OY,4BAAQ;AA6OrB,qBAAmB","sourcesContent":["/**\r\n * Holds all logic used render and output the final documentation.\r\n *\r\n * The [[Renderer]] class is the central controller within this namespace. When invoked it creates\r\n * an instance of [[BaseTheme]] which defines the layout of the documentation and fires a\r\n * series of [[RendererEvent]] events. Instances of [[BasePlugin]] can listen to these events and\r\n * alter the generated output.\r\n */\r\n\r\nimport * as Path from 'path';\r\nimport * as FS from 'fs-extra';\r\n// tslint:disable-next-line:variable-name\r\nconst ProgressBar = require('progress');\r\n\r\nimport { Application } from '../application';\r\nimport { Theme } from './theme';\r\nimport { RendererEvent, PageEvent } from './events';\r\nimport { ProjectReflection } from '../models/reflections/project';\r\nimport { UrlMapping } from './models/UrlMapping';\r\nimport { writeFile } from '../utils/fs';\r\nimport { DefaultTheme } from './themes/DefaultTheme';\r\nimport { RendererComponent } from './components';\r\nimport { Component, ChildableComponent, Option } from '../utils/component';\r\nimport { ParameterType } from '../utils/options/declaration';\r\n\r\n/**\r\n * The renderer processes a [[ProjectReflection]] using a [[BaseTheme]] instance and writes\r\n * the emitted html documents to a output directory. You can specify which theme should be used\r\n * using the ```--theme <name>``` commandline argument.\r\n *\r\n * Subclasses of [[BasePlugin]] that have registered themselves in the [[Renderer.PLUGIN_CLASSES]]\r\n * will be automatically initialized. Most of the core functionality is provided as separate plugins.\r\n *\r\n * [[Renderer]] is a subclass of [[EventDispatcher]] and triggers a series of events while\r\n * a project is being processed. You can listen to these events to control the flow or manipulate\r\n * the output.\r\n *\r\n *  * [[Renderer.EVENT_BEGIN]]<br>\r\n *    Triggered before the renderer starts rendering a project. The listener receives\r\n *    an instance of [[RendererEvent]]. By calling [[RendererEvent.preventDefault]] the entire\r\n *    render process can be canceled.\r\n *\r\n *    * [[Renderer.EVENT_BEGIN_PAGE]]<br>\r\n *      Triggered before a document will be rendered. The listener receives an instance of\r\n *      [[PageEvent]]. By calling [[PageEvent.preventDefault]] the generation of the\r\n *      document can be canceled.\r\n *\r\n *    * [[Renderer.EVENT_END_PAGE]]<br>\r\n *      Triggered after a document has been rendered, just before it is written to disc. The\r\n *      listener receives an instance of [[PageEvent]]. When calling\r\n *      [[PageEvent.preventDefault]] the the document will not be saved to disc.\r\n *\r\n *  * [[Renderer.EVENT_END]]<br>\r\n *    Triggered after the renderer has written all documents. The listener receives\r\n *    an instance of [[RendererEvent]].\r\n */\r\n@Component({name: 'renderer', internal: true, childClass: RendererComponent})\r\nexport class Renderer extends ChildableComponent<Application, RendererComponent> {\r\n    /**\r\n     * The theme that is used to render the documentation.\r\n     */\r\n    theme?: Theme;\r\n\r\n    @Option({\r\n        name: 'theme',\r\n        help: 'Specify the path to the theme that should be used or \\'default\\' or \\'minimal\\' to use built-in themes.',\r\n        type: ParameterType.String,\r\n        defaultValue: 'default'\r\n    })\r\n    themeName!: string;\r\n\r\n    @Option({\r\n        name: 'disableOutputCheck',\r\n        help: 'Should TypeDoc disable the testing and cleaning of the output directory?',\r\n        type: ParameterType.Boolean\r\n    })\r\n    disableOutputCheck!: boolean;\r\n\r\n    @Option({\r\n        name: 'gaID',\r\n        help: 'Set the Google Analytics tracking ID and activate tracking code.'\r\n    })\r\n    gaID!: string;\r\n\r\n    @Option({\r\n        name: 'gaSite',\r\n        help: 'Set the site name for Google Analytics. Defaults to `auto`.',\r\n        defaultValue: 'auto'\r\n    })\r\n    gaSite!: string;\r\n\r\n    @Option({\r\n        name: 'hideGenerator',\r\n        help: 'Do not print the TypeDoc link at the end of the page.',\r\n        type: ParameterType.Boolean\r\n    })\r\n    hideGenerator!: boolean;\r\n\r\n    @Option({\r\n        name: 'entryPoint',\r\n        help: 'Specifies the fully qualified name of the root symbol. Defaults to global namespace.',\r\n        type: ParameterType.String\r\n    })\r\n    entryPoint!: string;\r\n\r\n    @Option({\r\n        name: 'toc',\r\n        help: 'Specifies the top level table of contents.',\r\n        type: ParameterType.Array\r\n    })\r\n    toc!: string[];\r\n\r\n    /**\r\n     * Create a new Renderer instance.\r\n     *\r\n     * @param application  The application this dispatcher is attached to.\r\n     */\r\n    initialize() {\r\n    }\r\n\r\n    /**\r\n     * Render the given project reflection to the specified output directory.\r\n     *\r\n     * @param project  The project that should be rendered.\r\n     * @param outputDirectory  The path of the directory the documentation should be rendered to.\r\n     */\r\n    render(project: ProjectReflection, outputDirectory: string) {\r\n        if (!this.prepareTheme() || !this.prepareOutputDirectory(outputDirectory)) {\r\n            return;\r\n        }\r\n\r\n        const output = new RendererEvent(RendererEvent.BEGIN, outputDirectory, project);\r\n        output.settings = this.application.options.getRawValues();\r\n        output.urls = this.theme!.getUrls(project);\r\n\r\n        const bar = new ProgressBar('Rendering [:bar] :percent', {\r\n            total: output.urls.length,\r\n            width: 40\r\n        });\r\n\r\n        this.trigger(output);\r\n        if (!output.isDefaultPrevented) {\r\n            output.urls.forEach((mapping: UrlMapping) => {\r\n                this.renderDocument(output.createPageEvent(mapping));\r\n                bar.tick();\r\n            });\r\n\r\n            this.trigger(RendererEvent.END, output);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render a single page.\r\n     *\r\n     * @param page An event describing the current page.\r\n     * @return TRUE if the page has been saved to disc, otherwise FALSE.\r\n     */\r\n    private renderDocument(page: PageEvent): boolean {\r\n        this.trigger(PageEvent.BEGIN, page);\r\n        if (page.isDefaultPrevented) {\r\n            return false;\r\n        }\r\n\r\n        // Theme must be set as this is only called in render, and render ensures theme is set.\r\n        page.template = page.template || this.theme!.resources.templates.getResource(page.templateName)!.getTemplate();\r\n        page.contents = page.template(page);\r\n\r\n        this.trigger(PageEvent.END, page);\r\n        if (page.isDefaultPrevented) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            writeFile(page.filename, page.contents, false);\r\n        } catch (error) {\r\n            this.application.logger.error('Could not write %s', page.filename);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Ensure that a theme has been setup.\r\n     *\r\n     * If a the user has set a theme we try to find and load it. If no theme has\r\n     * been specified we load the default theme.\r\n     *\r\n     * @returns TRUE if a theme has been setup, otherwise FALSE.\r\n     */\r\n    private prepareTheme(): boolean {\r\n        if (!this.theme) {\r\n            const themeName = this.themeName;\r\n            let path = Path.resolve(themeName);\r\n            if (!FS.existsSync(path)) {\r\n                path = Path.join(Renderer.getThemeDirectory(), themeName);\r\n                if (!FS.existsSync(path)) {\r\n                    this.application.logger.error('The theme %s could not be found.', themeName);\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            const filename = Path.join(path, 'theme.js');\r\n            if (!FS.existsSync(filename)) {\r\n                this.theme = this.addComponent('theme', new DefaultTheme(this, path));\r\n            } else {\r\n                try {\r\n                    const themeClass = typeof require(filename) === 'function' ? require(filename) : require(filename).default;\r\n\r\n                    this.theme = this.addComponent('theme', new (themeClass)(this, path));\r\n                } catch (err) {\r\n                    throw new Error(\r\n                        `Exception while loading \"${filename}\". You must export a \\`new Theme(renderer, basePath)\\` compatible class.\\n` +\r\n                        err\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        this.theme!.resources.activate();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prepare the output directory. If the directory does not exist, it will be\r\n     * created. If the directory exists, it will be emptied.\r\n     *\r\n     * @param directory  The path to the directory that should be prepared.\r\n     * @returns TRUE if the directory could be prepared, otherwise FALSE.\r\n     */\r\n    private prepareOutputDirectory(directory: string): boolean {\r\n        if (FS.existsSync(directory)) {\r\n            if (!FS.statSync(directory).isDirectory()) {\r\n                this.application.logger.error(\r\n                    'The output target \"%s\" exists but it is not a directory.',\r\n                    directory);\r\n                return false;\r\n            }\r\n\r\n            if (this.disableOutputCheck) {\r\n                return true;\r\n            }\r\n\r\n            if (FS.readdirSync(directory).length === 0) {\r\n                return true;\r\n            }\r\n\r\n            // Theme must be set as this is only called after the theme is created.\r\n            if (!this.theme!.isOutputDirectory(directory)) {\r\n                this.application.logger.error(\r\n                    'The output directory \"%s\" exists but does not seem to be a documentation generated by TypeDoc.\\n' +\r\n                    'Make sure this is the right target directory, delete the folder and rerun TypeDoc.',\r\n                    directory);\r\n                return false;\r\n            }\r\n\r\n            try {\r\n                FS.removeSync(directory);\r\n            } catch (error) {\r\n                this.application.logger.warn('Could not empty the output directory.');\r\n            }\r\n        }\r\n\r\n        if (!FS.existsSync(directory)) {\r\n            try {\r\n                FS.mkdirpSync(directory);\r\n            } catch (error) {\r\n                this.application.logger.error('Could not create output directory %s', directory);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Return the path containing the themes shipped with TypeDoc.\r\n     *\r\n     * @returns The path to the theme directory.\r\n     */\r\n    static getThemeDirectory(): string {\r\n        return Path.dirname(require.resolve('typedoc-default-themes'));\r\n    }\r\n\r\n    /**\r\n     * Return the path to the default theme.\r\n     *\r\n     * @returns The path to the default theme.\r\n     */\r\n    static getDefaultTheme(): string {\r\n        return Path.join(Renderer.getThemeDirectory(), 'default');\r\n    }\r\n}\r\n\r\nimport './plugins';\r\n"]}