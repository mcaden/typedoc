{"version":3,"file":"SourcePlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/SourcePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\r\nimport * as ts from 'typescript';\r\nimport * as _ts from '../../ts-internal';\r\n\r\nimport { Reflection, ProjectReflection, DeclarationReflection } from '../../models/reflections/index';\r\nimport { SourceDirectory, SourceFile } from '../../models/sources/index';\r\nimport { Component, ConverterComponent } from '../components';\r\nimport { BasePath } from '../utils/base-path';\r\nimport { Converter } from '../converter';\r\nimport { Context } from '../context';\r\n\r\n/**\r\n * A handler that attaches source file information to reflections.\r\n */\r\n@Component({name: 'source'})\r\nexport class SourcePlugin extends ConverterComponent {\r\n    /**\r\n     * Helper for resolving the base path of all source files.\r\n     */\r\n    private basePath = new BasePath();\r\n\r\n    /**\r\n     * A map of all generated [[SourceFile]] instances.\r\n     */\r\n    private fileMappings: {[name: string]: SourceFile} = {};\r\n\r\n    /**\r\n     * Create a new SourceHandler instance.\r\n     */\r\n    initialize() {\r\n        this.listenTo(this.owner, {\r\n            [Converter.EVENT_BEGIN]:              this.onBegin,\r\n            [Converter.EVENT_FILE_BEGIN]:         this.onBeginDocument,\r\n            [Converter.EVENT_CREATE_DECLARATION]: this.onDeclaration,\r\n            [Converter.EVENT_CREATE_SIGNATURE]:   this.onDeclaration,\r\n            [Converter.EVENT_RESOLVE_BEGIN]:      this.onBeginResolve,\r\n            [Converter.EVENT_RESOLVE]:            this.onResolve,\r\n            [Converter.EVENT_RESOLVE_END]:        this.onEndResolve\r\n        });\r\n    }\r\n\r\n    private getSourceFile(fileName: string, project: ProjectReflection): SourceFile {\r\n        if (!this.fileMappings[fileName]) {\r\n            const file = new SourceFile(fileName);\r\n            this.fileMappings[fileName] = file;\r\n            project.files.push(file);\r\n        }\r\n\r\n        return this.fileMappings[fileName];\r\n    }\r\n\r\n    /**\r\n     * Triggered once per project before the dispatcher invokes the compiler.\r\n     *\r\n     * @param event  An event object containing the related project and compiler instance.\r\n     */\r\n    private onBegin() {\r\n        this.basePath.reset();\r\n        this.fileMappings = {};\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter begins converting a source file.\r\n     *\r\n     * Create a new [[SourceFile]] instance for all TypeScript files.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param reflection  The reflection that is currently processed.\r\n     * @param node  The node that is currently processed if available.\r\n     */\r\n    private onBeginDocument(context: Context, reflection: Reflection, node?: ts.SourceFile) {\r\n        if (!node) {\r\n            return;\r\n        }\r\n        const fileName = node.fileName;\r\n        this.basePath.add(fileName);\r\n        this.getSourceFile(fileName, context.project);\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter has created a declaration reflection.\r\n     *\r\n     * Attach the current source file to the [[DeclarationReflection.sources]] array.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param reflection  The reflection that is currently processed.\r\n     * @param node  The node that is currently processed if available.\r\n     */\r\n    private onDeclaration(context: Context, reflection: Reflection, node?: ts.Node) {\r\n        if (!node) {\r\n            return;\r\n        }\r\n        const sourceFile      = _ts.getSourceFileOfNode(node);\r\n        const fileName        = sourceFile.fileName;\r\n        const file: SourceFile = this.getSourceFile(fileName, context.project);\r\n\r\n        let position: ts.LineAndCharacter;\r\n        if (node['name'] && node['name'].end) {\r\n            position = ts.getLineAndCharacterOfPosition(sourceFile, node['name'].end);\r\n        } else {\r\n            position = ts.getLineAndCharacterOfPosition(sourceFile, node.pos);\r\n        }\r\n\r\n        if (!reflection.sources) {\r\n            reflection.sources = [];\r\n        }\r\n        if (reflection instanceof DeclarationReflection) {\r\n            file.reflections.push(reflection);\r\n        }\r\n\r\n        reflection.sources!.push({\r\n            file: file,\r\n            fileName: fileName,\r\n            line: position.line + 1,\r\n            character: position.character\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter begins resolving a project.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     */\r\n    private onBeginResolve(context: Context) {\r\n        context.project.files.forEach((file) => {\r\n            const fileName = file.fileName = this.basePath.trim(file.fileName);\r\n            this.fileMappings[fileName] = file;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter resolves a reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param reflection  The reflection that is currently resolved.\r\n     */\r\n    private onResolve(context: Context, reflection: Reflection) {\r\n        if (!reflection.sources) {\r\n            return;\r\n        }\r\n        reflection.sources.forEach((source) => {\r\n            source.fileName = this.basePath.trim(source.fileName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter has finished resolving a project.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     */\r\n    private onEndResolve(context: Context) {\r\n        const project = context.project;\r\n        const home = project.directory;\r\n        project.files.forEach((file) => {\r\n            const reflections: Reflection[] = [];\r\n            file.reflections.forEach((reflection) => {\r\n                reflections.push(reflection);\r\n            });\r\n\r\n            let directory = home;\r\n            const path = Path.dirname(file.fileName);\r\n            if (path !== '.') {\r\n                path.split('/').forEach((pathPiece) => {\r\n                    if (!Object.prototype.hasOwnProperty.call(directory.directories, pathPiece)) {\r\n                        directory.directories[pathPiece] = new SourceDirectory(pathPiece, directory);\r\n                    }\r\n                    directory = directory.directories[pathPiece];\r\n                });\r\n            }\r\n\r\n            directory.files.push(file);\r\n            // reflections.sort(GroupHandler.sortCallback);\r\n            file.parent = directory;\r\n            file.reflections = reflections;\r\n        });\r\n    }\r\n}\r\n"]}