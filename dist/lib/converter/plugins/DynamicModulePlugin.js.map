{"version":3,"file":"DynamicModulePlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/DynamicModulePlugin.ts"],"names":[],"mappings":";;;;;;;;AACA,6BAA6B;AAE7B,gEAA+E;AAC/E,8CAA8D;AAC9D,kDAA8C;AAC9C,4CAAyC;AAQzC,IAAa,mBAAmB,GAAhC,MAAa,mBAAoB,SAAQ,+BAAkB;IAD3D;;QAKY,aAAQ,GAAG,IAAI,oBAAQ,EAAE,CAAC;IA4DtC,CAAC;IAlDG,UAAU;QACN,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE;YACtB,CAAC,qBAAS,CAAC,WAAW,CAAC,EAAe,IAAI,CAAC,OAAO;YAClD,CAAC,qBAAS,CAAC,wBAAwB,CAAC,EAAE,IAAI,CAAC,aAAa;YACxD,CAAC,qBAAS,CAAC,mBAAmB,CAAC,EAAO,IAAI,CAAC,cAAc;SAC5D,CAAC,CAAC;IACP,CAAC;IAOO,OAAO,CAAC,OAAgB;QAC5B,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IAC1B,CAAC;IASO,aAAa,CAAC,OAAgB,EAAE,UAAsB,EAAE,IAAc;QAC1E,IAAI,UAAU,CAAC,MAAM,CAAC,yBAAc,CAAC,cAAc,CAAC,EAAE;YAClD,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;YAC3B,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC1B,OAAO;aACV;YAED,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC9B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAClC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAC3B;IACL,CAAC;IAOO,cAAc,CAAC,OAAgB;QACnC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YACpC,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC7C,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;YAC/D,UAAU,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;QAC3D,CAAC,CAAC,CAAC;IACP,CAAC;CACJ,CAAA;AAhEY,mBAAmB;IAD/B,sBAAS,CAAC,EAAC,IAAI,EAAE,gBAAgB,EAAC,CAAC;GACvB,mBAAmB,CAgE/B;AAhEY,kDAAmB","sourcesContent":["import * as ts from 'typescript';\r\nimport * as Path from 'path';\r\n\r\nimport { Reflection, ReflectionKind } from '../../models/reflections/abstract';\r\nimport { Component, ConverterComponent } from '../components';\r\nimport { BasePath } from '../utils/base-path';\r\nimport { Converter } from '../converter';\r\nimport { Context } from '../context';\r\n\r\n/**\r\n * A handler that truncates the names of dynamic modules to not include the\r\n * project's base path.\r\n */\r\n@Component({name: 'dynamic-module'})\r\nexport class DynamicModulePlugin extends ConverterComponent {\r\n    /**\r\n     * Helper class for determining the base path.\r\n     */\r\n    private basePath = new BasePath();\r\n\r\n    /**\r\n     * List of reflections whose name must be trimmed.\r\n     */\r\n    private reflections!: Reflection[];\r\n\r\n    /**\r\n     * Create a new DynamicModuleHandler instance.\r\n     */\r\n    initialize() {\r\n        this.listenTo(this.owner, {\r\n            [Converter.EVENT_BEGIN]:              this.onBegin,\r\n            [Converter.EVENT_CREATE_DECLARATION]: this.onDeclaration,\r\n            [Converter.EVENT_RESOLVE_BEGIN]:      this.onBeginResolve\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter begins converting a project.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     */\r\n    private onBegin(context: Context) {\r\n        this.basePath.reset();\r\n        this.reflections = [];\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter has created a declaration reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param reflection  The reflection that is currently processed.\r\n     * @param node  The node that is currently processed if available.\r\n     */\r\n    private onDeclaration(context: Context, reflection: Reflection, node?: ts.Node) {\r\n        if (reflection.kindOf(ReflectionKind.ExternalModule)) {\r\n            let name = reflection.name;\r\n            if (name.indexOf('/') === -1) {\r\n                return;\r\n            }\r\n\r\n            name = name.replace(/\"/g, '');\r\n            this.reflections.push(reflection);\r\n            this.basePath.add(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Triggered when the converter begins resolving a project.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     */\r\n    private onBeginResolve(context: Context) {\r\n        this.reflections.forEach((reflection) => {\r\n            let name = reflection.name.replace(/\"/g, '');\r\n            name = name.substr(0, name.length - Path.extname(name).length);\r\n            reflection.name = '\"' + this.basePath.trim(name) + '\"';\r\n        });\r\n    }\r\n}\r\n"]}