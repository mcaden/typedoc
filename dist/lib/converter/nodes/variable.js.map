{"version":3,"file":"variable.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/variable.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\r\nimport * as _ts from '../../ts-internal';\r\n\r\nimport { Reflection, ReflectionFlag, ReflectionKind, IntrinsicType } from '../../models/index';\r\nimport { createDeclaration, createComment } from '../factories/index';\r\nimport { Context } from '../context';\r\nimport { Component, ConverterNodeComponent } from '../components';\r\nimport { convertDefaultValue } from '../index';\r\n\r\n@Component({name: 'node:variable'})\r\nexport class VariableConverter extends ConverterNodeComponent<ts.VariableDeclaration> {\r\n    /**\r\n     * List of supported TypeScript syntax kinds.\r\n     */\r\n    supports: ts.SyntaxKind[] = [\r\n        ts.SyntaxKind.PropertySignature,\r\n        ts.SyntaxKind.PropertyDeclaration,\r\n        ts.SyntaxKind.PropertyAssignment,\r\n        ts.SyntaxKind.ShorthandPropertyAssignment,\r\n        ts.SyntaxKind.VariableDeclaration,\r\n        ts.SyntaxKind.BindingElement\r\n    ];\r\n\r\n    isSimpleObjectLiteral(objectLiteral: ts.ObjectLiteralExpression): boolean {\r\n        if (!objectLiteral.properties) {\r\n            return true;\r\n        }\r\n        return objectLiteral.properties.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Analyze the given variable declaration node and create a suitable reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node     The variable declaration node that should be analyzed.\r\n     * @return The resulting reflection or NULL.\r\n     */\r\n    convert(context: Context, node: ts.VariableDeclaration): Reflection {\r\n        const comment = createComment(node);\r\n        if (comment && comment.hasTag('resolve')) {\r\n            const resolveType = context.getTypeAtLocation(node);\r\n            if (resolveType && resolveType.symbol) {\r\n                const resolved = this.owner.convertNode(context, resolveType.symbol.declarations[0]);\r\n                if (resolved) {\r\n                    resolved.name = node.symbol.name;\r\n                }\r\n                return resolved;\r\n            }\r\n        }\r\n\r\n        let name: string, isBindingPattern: boolean;\r\n        if (_ts.isBindingPattern(node.name)) {\r\n            if (node['propertyName']) {\r\n                name = _ts.declarationNameToString(node['propertyName']);\r\n                isBindingPattern = true;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        const scope = context.scope;\r\n        const kind = scope.kind & ReflectionKind.ClassOrInterface ? ReflectionKind.Property : ReflectionKind.Variable;\r\n        const variable = createDeclaration(context, node, kind, name);\r\n\r\n        // The variable can be null if `excludeNotExported` is `true`\r\n        if (variable) {\r\n            switch (kind) {\r\n                case ReflectionKind.Variable:\r\n                    if (node.parent.flags & ts.NodeFlags.Const) {\r\n                        variable.setFlag(ReflectionFlag.Const, true);\r\n                    } else if (node.parent.flags & ts.NodeFlags.Let) {\r\n                        variable.setFlag(ReflectionFlag.Let, true);\r\n                    }\r\n                    break;\r\n                case ReflectionKind.Property:\r\n                    if (node.modifiers\r\n                        && node.modifiers.some( m => m.kind === ts.SyntaxKind.AbstractKeyword )) {\r\n                    variable.setFlag(ReflectionFlag.Abstract, true);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        context.withScope(variable, () => {\r\n            if (node.initializer) {\r\n                switch (node.initializer.kind) {\r\n                    case ts.SyntaxKind.ArrowFunction:\r\n                    case ts.SyntaxKind.FunctionExpression:\r\n                        variable.kind = scope.kind & ReflectionKind.ClassOrInterface ? ReflectionKind.Method : ReflectionKind.Function;\r\n                        this.owner.convertNode(context, node.initializer);\r\n                        break;\r\n                    case ts.SyntaxKind.ObjectLiteralExpression:\r\n                        if (!this.isSimpleObjectLiteral(<ts.ObjectLiteralExpression> node.initializer)) {\r\n                            variable.kind = ReflectionKind.ObjectLiteral;\r\n                            variable.type = new IntrinsicType('object');\r\n                            this.owner.convertNode(context, node.initializer);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        variable.defaultValue = convertDefaultValue(node);\r\n                }\r\n            }\r\n\r\n            if (variable.kind === kind || variable.kind === ReflectionKind.Event) {\r\n                if (isBindingPattern) {\r\n                    variable.type = this.owner.convertType(context, node.name);\r\n                } else {\r\n                    variable.type = this.owner.convertType(context, node.type, context.getTypeAtLocation(node));\r\n                }\r\n            }\r\n        });\r\n\r\n        return variable;\r\n    }\r\n}\r\n"]}