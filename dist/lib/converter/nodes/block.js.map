{"version":3,"file":"block.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/block.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { Reflection, ReflectionKind, ReflectionFlag } from '../../models/index';\r\nimport { createDeclaration } from '../factories/index';\r\nimport { Context } from '../context';\r\nimport { Component, ConverterNodeComponent } from '../components';\r\nimport { Option } from '../../utils/component';\r\nimport { ParameterType } from '../../utils/options/declaration';\r\n\r\nconst preferred: ts.SyntaxKind[] = [\r\n    ts.SyntaxKind.ClassDeclaration,\r\n    ts.SyntaxKind.InterfaceDeclaration,\r\n    ts.SyntaxKind.EnumDeclaration\r\n];\r\n\r\nexport enum SourceFileMode {\r\n    File, Modules\r\n}\r\n\r\n@Component({name: 'node:block'})\r\nexport class BlockConverter extends ConverterNodeComponent<ts.SourceFile|ts.Block|ts.ModuleBlock> {\r\n    @Option({\r\n        name: 'mode',\r\n        help: \"Specifies the output mode the project is used to be compiled with: 'file' or 'modules'\",\r\n        type: ParameterType.Map,\r\n        map: {\r\n            'file': SourceFileMode.File,\r\n            'modules': SourceFileMode.Modules\r\n        },\r\n        defaultValue: SourceFileMode.Modules\r\n    })\r\n    mode!: SourceFileMode;\r\n\r\n    /**\r\n     * List of supported TypeScript syntax kinds.\r\n     */\r\n    supports: ts.SyntaxKind[] = [\r\n        ts.SyntaxKind.Block,\r\n        ts.SyntaxKind.ModuleBlock,\r\n        ts.SyntaxKind.SourceFile\r\n    ];\r\n\r\n    /**\r\n     * Analyze the given class declaration node and create a suitable reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node     The class declaration node that should be analyzed.\r\n     * @return The resulting reflection or NULL.\r\n     */\r\n    convert(context: Context, node: ts.SourceFile|ts.Block|ts.ModuleBlock): Reflection {\r\n        if (node.kind === ts.SyntaxKind.SourceFile) {\r\n            this.convertSourceFile(context, node);\r\n        } else {\r\n            this.convertStatements(context, node);\r\n        }\r\n\r\n        return context.scope;\r\n    }\r\n\r\n    /**\r\n     * Analyze the given source file node and create a suitable reflection.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node     The source file node that should be analyzed.\r\n     * @return The resulting reflection or NULL.\r\n     */\r\n    private convertSourceFile(context: Context, node: ts.SourceFile): Reflection | undefined {\r\n        let result: Reflection | undefined = context.scope;\r\n\r\n        context.withSourceFile(node, () => {\r\n            if (this.mode === SourceFileMode.Modules) {\r\n                result = createDeclaration(context, node, ReflectionKind.ExternalModule, node.fileName);\r\n                context.withScope(result, () => {\r\n                    this.convertStatements(context, node);\r\n                    result!.setFlag(ReflectionFlag.Exported);\r\n                });\r\n            } else {\r\n                this.convertStatements(context, node);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    private convertStatements(context: Context, node: ts.SourceFile|ts.Block|ts.ModuleBlock) {\r\n        if (node.statements) {\r\n            const statements: ts.Statement[] = [];\r\n\r\n            node.statements.forEach((statement) => {\r\n                if (preferred.indexOf(statement.kind) !== -1) {\r\n                    this.owner.convertNode(context, statement);\r\n                } else {\r\n                    statements.push(statement);\r\n                }\r\n            });\r\n\r\n            statements.forEach((statement) => {\r\n                this.owner.convertNode(context, statement);\r\n            });\r\n        }\r\n    }\r\n}\r\n"]}