{"version":3,"file":"this.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/this.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,oDAA+D;AAC/D,8CAAqF;AAIrF,IAAa,aAAa,GAA1B,MAAa,aAAc,SAAQ,mCAAsB;IAI9C,YAAY,CAAC,OAAgB,EAAE,IAAqB,EAAE,IAAa;QACtE,OAAO,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;IAChD,CAAC;IAiBM,WAAW,CAAC,OAAgB,EAAE,IAAqB,EAAE,IAAa;QACrE,OAAO,IAAI,qBAAa,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC;CACJ,CAAA;AA1BY,aAAa;IADzB,sBAAS,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;GACpB,aAAa,CA0BzB;AA1BY,sCAAa","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { Type, IntrinsicType } from '../../models/types/index';\r\nimport { Component, ConverterTypeComponent, TypeNodeConverter } from '../components';\r\nimport { Context } from '../context';\r\n\r\n@Component({ name: 'type:this' })\r\nexport class ThisConverter extends ConverterTypeComponent implements TypeNodeConverter<ts.Type, ts.ThisTypeNode> {\r\n    /**\r\n     * Test whether this converter can handle the given TypeScript node.\r\n     */\r\n    public supportsNode(context: Context, node: ts.ThisTypeNode, type: ts.Type): boolean {\r\n        return node.kind === ts.SyntaxKind.ThisType;\r\n    }\r\n\r\n    /**\r\n     * Convert the type reference node to its type reflection.\r\n     *\r\n     * This is a node based converter, see [[convertTypeReferenceType]] for the type equivalent.\r\n     *\r\n     * ```\r\n     * class SomeClass { }\r\n     * var someValue:SomeClass;\r\n     * ```\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node  The type reference node that should be converted.\r\n     * @param type  The type of the type reference node.\r\n     * @returns The type reflection representing the given reference node.\r\n     */\r\n    public convertNode(context: Context, node: ts.ThisTypeNode, type: ts.Type): Type {\r\n        return new IntrinsicType('this');\r\n    }\r\n}\r\n"]}