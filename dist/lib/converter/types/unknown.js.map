{"version":3,"file":"unknown.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/unknown.ts"],"names":[],"mappings":";;;;;;;;AAEA,oDAA6D;AAC7D,8CAAqF;AAIrF,IAAa,gBAAgB,GAA7B,MAAa,gBAAiB,SAAQ,mCAAsB;IAD5D;;QAMI,aAAQ,GAAG,CAAC,GAAG,CAAC;IA0BpB,CAAC;IArBG,YAAY,CAAC,OAAgB,EAAE,IAAa;QACxC,OAAO,IAAI,CAAC;IAChB,CAAC;IAeD,WAAW,CAAC,OAAgB,EAAE,IAAa;QACvC,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAChD,OAAO,IAAI,mBAAW,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;CACJ,CAAA;AA/BY,gBAAgB;IAD5B,sBAAS,CAAC,EAAC,IAAI,EAAE,cAAc,EAAC,CAAC;GACrB,gBAAgB,CA+B5B;AA/BY,4CAAgB","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { Type, UnknownType } from '../../models/types/index';\r\nimport { Component, ConverterTypeComponent, TypeTypeConverter } from '../components';\r\nimport { Context } from '../context';\r\n\r\n@Component({name: 'type:unknown'})\r\nexport class UnknownConverter extends ConverterTypeComponent implements TypeTypeConverter<ts.Type> {\r\n    /**\r\n     * The priority this converter should be executed with.\r\n     * A higher priority means the converter will be applied earlier.\r\n     */\r\n    priority = -100;\r\n\r\n    /**\r\n     * Test whether this converter can handle the given TypeScript type.\r\n     */\r\n    supportsType(context: Context, type: ts.Type): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Convert the given type to its type reflection.\r\n     *\r\n     * This is a type based converter with no node based equivalent.\r\n     *\r\n     * If no other converter is able to reflect a type, this converter will produce a\r\n     * reflection by utilizing ts.typeToString() to generate a string representation of the\r\n     * given type.\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param type  The type that should be converted.\r\n     * @returns The type reflection representing the given type.\r\n     */\r\n    convertType(context: Context, type: ts.Type): Type {\r\n        const name = context.checker.typeToString(type);\r\n        return new UnknownType(name);\r\n    }\r\n}\r\n"]}