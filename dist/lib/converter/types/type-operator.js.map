{"version":3,"file":"type-operator.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/type-operator.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,oDAA4D;AAC5D,8CAAqF;AAIrF,IAAa,qBAAqB,GAAlC,MAAa,qBAAsB,SAAQ,mCAAsB;IADjE;;QAKI,aAAQ,GAAG,EAAE,CAAC;IAsBlB,CAAC;IAjBG,YAAY,CAAC,OAAgB,EAAE,IAAyB,EAAE,IAAa;QACnE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;IACxD,CAAC;IASD,WAAW,CAAC,OAAgB,EAAE,IAAyB;QACnD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1D,IAAI,MAAM,EAAE;YACR,OAAO,IAAI,wBAAgB,CAAC,MAAM,CAAC,CAAC;SACvC;IACL,CAAC;CACJ,CAAA;AA1BY,qBAAqB;IADjC,sBAAS,CAAC,EAAC,IAAI,EAAE,oBAAoB,EAAC,CAAC;GAC3B,qBAAqB,CA0BjC;AA1BY,sDAAqB","sourcesContent":["import * as ts from 'typescript';\r\n\r\nimport { TypeOperatorType } from '../../models/types/index';\r\nimport { Component, ConverterTypeComponent, TypeNodeConverter } from '../components';\r\nimport { Context } from '../context';\r\n\r\n@Component({name: 'type:type-operator'})\r\nexport class TypeOperatorConverter extends ConverterTypeComponent implements TypeNodeConverter<ts.Type, ts.TypeOperatorNode> {\r\n    /**\r\n     * we want to run before union\r\n     */\r\n    priority = 50;\r\n\r\n    /**\r\n     * Test whether this converter can handle the given TypeScript node.\r\n     */\r\n    supportsNode(context: Context, node: ts.TypeOperatorNode, type: ts.Type): boolean {\r\n        return !!(node.kind === ts.SyntaxKind.TypeOperator);\r\n    }\r\n\r\n    /**\r\n     * Interpret the given type operator node and convert it into a type representing keys of a type\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node  The type operator node representing keys of a type.\r\n     * @returns The type representing keys of a type.\r\n     */\r\n    convertNode(context: Context, node: ts.TypeOperatorNode): TypeOperatorType | undefined {\r\n        const target = this.owner.convertType(context, node.type);\r\n        if (target) {\r\n            return new TypeOperatorType(target);\r\n        }\r\n    }\r\n}\r\n"]}