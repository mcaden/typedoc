{"version":3,"file":"type-parameter.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/type-parameter.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AACjC,yCAAyC;AAEzC,oDAAmE;AACnE,8CAAqF;AAIrF,IAAa,sBAAsB,GAAnC,MAAa,sBAAuB,SAAQ,mCAAsB;IADlE;;QAMI,aAAQ,GAAG,CAAC,EAAE,CAAC;IAkCnB,CAAC;IA7BG,YAAY,CAAC,OAAgB,EAAE,IAA0B,EAAE,IAAa;QACpE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IACvD,CAAC;IAiBD,WAAW,CAAC,OAAgB,EAAE,IAA0B;QACpD,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,MAAM,IAAI,GAAG,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC9C,IAAI,OAAO,CAAC,cAAc,IAAI,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;gBACxD,OAAO,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;aAC/C;YAED,OAAO,IAAI,yBAAiB,CAAC,IAAI,CAAC,CAAC;SACtC;IACL,CAAC;CACJ,CAAA;AAvCY,sBAAsB;IADlC,sBAAS,CAAC,EAAC,IAAI,EAAE,qBAAqB,EAAC,CAAC;GAC5B,sBAAsB,CAuClC;AAvCY,wDAAsB","sourcesContent":["import * as ts from 'typescript';\r\nimport * as _ts from '../../ts-internal';\r\n\r\nimport { Type, TypeParameterType } from '../../models/types/index';\r\nimport { Component, ConverterTypeComponent, TypeNodeConverter } from '../components';\r\nimport { Context } from '../context';\r\n\r\n@Component({name: 'type:type-parameter'})\r\nexport class TypeParameterConverter extends ConverterTypeComponent implements TypeNodeConverter<ts.Type, ts.TypeReferenceNode> {\r\n    /**\r\n     * The priority this converter should be executed with.\r\n     * A higher priority means the converter will be applied earlier.\r\n     */\r\n    priority = -50;\r\n\r\n    /**\r\n     * Test whether this converter can handle the given TypeScript node.\r\n     */\r\n    supportsNode(context: Context, node: ts.TypeReferenceNode, type: ts.Type): boolean {\r\n        return !!(type.flags & ts.TypeFlags.TypeParameter);\r\n    }\r\n\r\n    /**\r\n     * Interpret the given type reference node as a type parameter and convert it to its type reflection.\r\n     *\r\n     * This is a node based converter with no type equivalent.\r\n     *\r\n     * ```\r\n     * class SomeClass<T> {\r\n     *   public someValue: T;\r\n     * }\r\n     * ```\r\n     *\r\n     * @param context  The context object describing the current state the converter is in.\r\n     * @param node  The type reference node representing a type parameter.\r\n     * @returns The type reflection representing the given type parameter.\r\n     */\r\n    convertNode(context: Context, node: ts.TypeReferenceNode): Type | undefined {\r\n        if (node.typeName) {\r\n            const name = _ts.getTextOfNode(node.typeName);\r\n            if (context.typeParameters && context.typeParameters[name]) {\r\n                return context.typeParameters[name].clone();\r\n            }\r\n\r\n            return new TypeParameterType(name);\r\n        }\r\n    }\r\n}\r\n"]}