{"version":3,"file":"tsconfig.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/readers/tsconfig.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\r\nimport * as FS from 'fs';\r\nimport * as _ from 'lodash';\r\nimport * as ts from 'typescript';\r\n\r\nimport { Component, Option } from '../../component';\r\nimport { OptionsComponent, OptionsReadMode, DiscoverEvent } from '../options';\r\nimport { ParameterType, ParameterHint } from '../declaration';\r\nimport { TypeScriptSource } from '../sources/typescript';\r\n\r\n@Component({name: 'options:tsconfig'})\r\nexport class TSConfigReader extends OptionsComponent {\r\n    @Option({\r\n        name: TSConfigReader.OPTIONS_KEY,\r\n        help: 'Specify a typescript config file that should be loaded. If not specified TypeDoc will look for \\'tsconfig.json\\' in the current directory.',\r\n        type: ParameterType.String,\r\n        hint: ParameterHint.File\r\n    })\r\n    options!: string;\r\n\r\n    /**\r\n     * The name of the parameter that specifies the tsconfig file.\r\n     */\r\n    private static OPTIONS_KEY = 'tsconfig';\r\n\r\n    /**\r\n     * The name of the parameter that specifies the TS project\r\n     *\r\n     * https://github.com/Microsoft/TypeScript/blob/master/src/compiler/commandLineParser.ts#L49\r\n     */\r\n    private static PROJECT_KEY = 'project';\r\n\r\n    initialize() {\r\n        this.listenTo(this.owner, DiscoverEvent.DISCOVER, this.onDiscover, -100);\r\n    }\r\n\r\n    onDiscover(event: DiscoverEvent) {\r\n        // Do nothing until were fetching options\r\n        if (event.mode !== OptionsReadMode.Fetch) {\r\n            return;\r\n        }\r\n\r\n        if (TSConfigReader.OPTIONS_KEY in event.data) {\r\n            this.load(event, Path.resolve(event.data[TSConfigReader.OPTIONS_KEY]));\r\n        } else if (TSConfigReader.PROJECT_KEY in event.data) {\r\n            // The `project` option may be a directory or file, so use TS to find it\r\n            const file = ts.findConfigFile(event.data[TSConfigReader.PROJECT_KEY], ts.sys.fileExists);\r\n            // If file is undefined, we found no file to load.\r\n            if (file) {\r\n                this.load(event, file);\r\n            }\r\n        } else if (this.application.isCLI) {\r\n            const file = ts.findConfigFile('.', ts.sys.fileExists);\r\n            // If file is undefined, we found no file to load.\r\n            if (file) {\r\n                this.load(event, file);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load the specified tsconfig file.\r\n     *\r\n     * @param event  The event that triggered the loading. Used to store error messages.\r\n     * @param fileName  The absolute path and file name of the tsconfig file.\r\n     */\r\n    load(event: DiscoverEvent, fileName: string) {\r\n        if (!FS.existsSync(fileName)) {\r\n            event.addError('The tsconfig file %s does not exist.', fileName);\r\n            return;\r\n        }\r\n\r\n        const { config } = ts.readConfigFile(fileName, ts.sys.readFile);\r\n        if (config === undefined) {\r\n            event.addError('The tsconfig file %s does not contain valid JSON.', fileName);\r\n            return;\r\n        }\r\n        if (!_.isPlainObject(config)) {\r\n            event.addError('The tsconfig file %s does not contain a JSON object.', fileName);\r\n            return;\r\n        }\r\n\r\n        const { fileNames, options, raw: { typedocOptions }} = ts.parseJsonConfigFileContent(\r\n            config,\r\n            ts.sys,\r\n            Path.resolve(Path.dirname(fileName)),\r\n            {},\r\n            Path.resolve(fileName));\r\n\r\n        event.inputFiles = fileNames;\r\n\r\n        const ignored = TypeScriptSource.IGNORED;\r\n        for (const key of ignored) {\r\n            delete options[key];\r\n        }\r\n\r\n        _.defaults(event.data, typedocOptions, options);\r\n    }\r\n}\r\n"]}