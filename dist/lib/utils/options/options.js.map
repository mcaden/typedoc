{"version":3,"file":"options.js","sourceRoot":"","sources":["../../../../src/lib/utils/options/options.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\r\nimport * as Util from 'util';\r\nimport * as ts from 'typescript';\r\n\r\nimport { Event } from '../events';\r\nimport { Component, AbstractComponent, ChildableComponent } from '../component';\r\nimport { Application } from '../../application';\r\nimport { OptionDeclaration, DeclarationOption, ParameterScope } from './declaration';\r\n\r\nexport class OptionsComponent extends AbstractComponent<Options> { }\r\n\r\nexport enum OptionsReadMode {\r\n    Prefetch,\r\n    Fetch\r\n}\r\n\r\nexport interface OptionsReadResult {\r\n    hasErrors: boolean;\r\n    inputFiles: string[];\r\n}\r\n\r\nexport class DiscoverEvent extends Event {\r\n    readonly mode: OptionsReadMode;\r\n    data: any;\r\n\r\n    constructor(name: string, mode: OptionsReadMode) {\r\n        super(name);\r\n        this.mode = mode;\r\n    }\r\n\r\n    inputFiles: string[] = [];\r\n\r\n    errors: string[] = [];\r\n\r\n    static DISCOVER = 'optionsDiscover';\r\n\r\n    /**\r\n     * Add an input/source file.\r\n     *\r\n     * The input files will be used as source files for the compiler. All command line\r\n     * arguments without parameter will be interpreted as being input files.\r\n     *\r\n     * @param fileName The path and filename of the input file.\r\n     */\r\n    addInputFile(fileName: string) {\r\n        this.inputFiles.push(fileName);\r\n    }\r\n\r\n    addError(message: string, ...args: string[]) {\r\n        this.errors.push(Util.format.apply(this, arguments));\r\n    }\r\n}\r\n\r\n@Component({name: 'options', internal: true, childClass: OptionsComponent})\r\nexport class Options extends ChildableComponent<Application, OptionsComponent> {\r\n    private declarations!: {[name: string]: OptionDeclaration};\r\n\r\n    private values!: {[name: string]: any};\r\n\r\n    private compilerOptions!: ts.CompilerOptions;\r\n\r\n    initialize() {\r\n        this.declarations = {};\r\n        this.values = {};\r\n        this.compilerOptions = {\r\n            target: ts.ScriptTarget.ES3,\r\n            module: ts.ModuleKind.None\r\n        };\r\n    }\r\n\r\n    read(data: any = {}, mode: OptionsReadMode = OptionsReadMode.Fetch): OptionsReadResult {\r\n        const event  = new DiscoverEvent(DiscoverEvent.DISCOVER, mode);\r\n        event.data = data;\r\n\r\n        this.trigger(event);\r\n        this.setValues(event.data, '', event.addError.bind(event));\r\n\r\n        if (mode === OptionsReadMode.Fetch) {\r\n            const logger = this.application.logger;\r\n            for (let error of event.errors) {\r\n                logger.error(error);\r\n            }\r\n        }\r\n\r\n        return {\r\n            hasErrors: event.errors.length > 0,\r\n            inputFiles: event.inputFiles\r\n        };\r\n    }\r\n\r\n    getValue(name: string): any {\r\n        const declaration = this.getDeclaration(name);\r\n        if (!declaration) {\r\n            throw new Error(Util.format('Unknown option `%s`.', name));\r\n        }\r\n\r\n        if (declaration.scope === ParameterScope.TypeScript) {\r\n            throw new Error('TypeScript options cannot be fetched using `getValue`, use `getCompilerOptions` instead.');\r\n        }\r\n\r\n        if (name in this.values) {\r\n            return this.values[name];\r\n        } else {\r\n            return declaration.defaultValue;\r\n        }\r\n    }\r\n\r\n    getRawValues(): any {\r\n        return _.clone(this.values);\r\n    }\r\n\r\n    getDeclaration(name: string): OptionDeclaration | undefined {\r\n        return this.declarations[name.toLowerCase()];\r\n    }\r\n\r\n    getDeclarationsByScope(scope: ParameterScope): OptionDeclaration[] {\r\n        const result = _.values(this.declarations)\r\n            .filter(declaration => declaration.scope === scope);\r\n        return _.uniq(result);\r\n    }\r\n\r\n    getCompilerOptions(): ts.CompilerOptions {\r\n        return this.compilerOptions;\r\n    }\r\n\r\n    setValue(name: string | OptionDeclaration, value: any, errorCallback?: (format: string, ...args: string[]) => void) {\r\n        const declaration = name instanceof OptionDeclaration ? name : this.getDeclaration(name);\r\n        if (!declaration) {\r\n            return;\r\n        }\r\n\r\n        const key = declaration.name;\r\n        if (declaration.scope === ParameterScope.TypeScript) {\r\n            this.compilerOptions[key] = declaration.convert(value, errorCallback);\r\n        } else {\r\n            this.values[key] = declaration.convert(value, errorCallback);\r\n        }\r\n    }\r\n\r\n    setValues(obj: Object, prefix: string = '', errorCallback?: (format: string, ...args: string[]) => void) {\r\n        for (let key in obj) {\r\n            const value = obj[key];\r\n            const declaration = this.getDeclaration(key);\r\n            const shouldValueBeAnObject = declaration && declaration['map'] === 'object';\r\n            if (!Array.isArray(value) && typeof value === 'object' && !shouldValueBeAnObject) {\r\n                this.setValues(value, prefix + key + '.', errorCallback);\r\n            } else {\r\n                this.setValue(prefix + key, value, errorCallback);\r\n            }\r\n        }\r\n    }\r\n\r\n    addDeclaration(declaration: OptionDeclaration|DeclarationOption) {\r\n        const decl = declaration instanceof OptionDeclaration\r\n            ? declaration\r\n            : new OptionDeclaration(declaration);\r\n\r\n        for (let name of decl.getNames()) {\r\n            if (name in this.declarations) {\r\n                this.application.logger.error('The option \"%s\" has already been registered by the \"%s\" component.',\r\n                    name,\r\n                    this.declarations[name].component || '__unknown');\r\n            } else {\r\n                this.declarations[name] = decl;\r\n            }\r\n        }\r\n    }\r\n\r\n    addDeclarations(declarations: (OptionDeclaration|DeclarationOption)[]) {\r\n        for (let declaration of declarations) {\r\n            this.addDeclaration(declaration);\r\n        }\r\n    }\r\n\r\n    removeDeclaration(declaration: OptionDeclaration) {\r\n        const names = _.keys(this.declarations);\r\n        for (const name of names) {\r\n            if (this.declarations[name] === declaration) {\r\n                delete this.declarations[name];\r\n            }\r\n        }\r\n\r\n        if (declaration.name in this.values) {\r\n            delete this.values[declaration.name];\r\n        }\r\n    }\r\n\r\n    removeDeclarationByName(name: string) {\r\n        const declaration = this.getDeclaration(name);\r\n        if (declaration) {\r\n            this.removeDeclaration(declaration);\r\n        }\r\n    }\r\n}\r\n"]}