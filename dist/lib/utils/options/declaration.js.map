{"version":3,"file":"declaration.js","sourceRoot":"","sources":["../../../../src/lib/utils/options/declaration.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\r\n\r\nexport enum ParameterHint {\r\n    File,\r\n    Directory\r\n}\r\n\r\nexport enum ParameterType {\r\n    String,\r\n    Number,\r\n    Boolean,\r\n    Map,\r\n    Mixed,\r\n    Array\r\n}\r\n\r\nexport enum ParameterScope {\r\n    TypeDoc,\r\n    TypeScript\r\n}\r\n\r\n/**\r\n * TODO: This should be a union type of multiple possible option types.\r\n */\r\nexport interface DeclarationOption {\r\n    name: string;\r\n    component?: string;\r\n    short?: string;\r\n    help: string;\r\n    type?: ParameterType;\r\n    hint?: ParameterHint;\r\n    scope?: ParameterScope;\r\n    map?: 'object' | Map<string | number, any> | { [ key: string]: any };\r\n    mapError?: string;\r\n    defaultValue?: any;\r\n    convert?: (param: OptionDeclaration, value?: any) => any;\r\n}\r\n\r\nexport class OptionDeclaration {\r\n    name!: string;\r\n\r\n    component?: string;\r\n\r\n    short?: string;\r\n\r\n    help!: string;\r\n\r\n    type: ParameterType = ParameterType.String;\r\n\r\n    hint?: ParameterHint;\r\n\r\n    scope: ParameterScope = ParameterScope.TypeDoc;\r\n\r\n    protected map?: { [k: string]: any } | 'object';\r\n\r\n    mapError?: string;\r\n\r\n    defaultValue: any;\r\n\r\n    constructor(data: DeclarationOption) {\r\n        for (let key in data) {\r\n            this[key] = data[key];\r\n        }\r\n    }\r\n\r\n    getNames(): string[] {\r\n        const result = [this.name.toLowerCase()];\r\n\r\n        if (this.short) {\r\n            result.push(this.short.toLowerCase());\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param value the value the user passed in\r\n     * @param errorCallback\r\n     */\r\n    convert(value: unknown, errorCallback?: (format: string, ...args: string[]) => void): any {\r\n        switch (this.type) {\r\n            case ParameterType.Number:\r\n                value = parseInt(value + '', 10);\r\n                break;\r\n            case ParameterType.Boolean:\r\n                value = !!value;\r\n                break;\r\n            case ParameterType.String:\r\n                value = value ? value + '' : '';\r\n                break;\r\n            case ParameterType.Array:\r\n                if (!value) {\r\n                    value = [];\r\n                // TSLint *should* be correct here, but tslint doesn't know about user config files.\r\n                // tslint:disable-next-line:strict-type-predicates\r\n                } else if (typeof value === 'string') {\r\n                    value = value.split(',');\r\n                }\r\n                break;\r\n            case ParameterType.Map:\r\n                const map = this.map || {};\r\n                if (map !== 'object') {\r\n                    const key = value ? (value + '').toLowerCase() : '';\r\n                    const values = _.values(map);\r\n\r\n                    if (map instanceof Map) {\r\n                        value = map.has(key) ? map.get(key) : value;\r\n                    } else if (key in map) {\r\n                        value = map[key];\r\n                    } else if (values.indexOf(value) === -1 && errorCallback) {\r\n                        if (this.mapError) {\r\n                            errorCallback(this.mapError);\r\n                        } else {\r\n                            errorCallback('Invalid value for option \"%s\".', this.name);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n\r\n        return value;\r\n    }\r\n}\r\n"]}