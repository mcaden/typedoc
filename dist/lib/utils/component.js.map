{"version":3,"file":"component.js","sourceRoot":"","sources":["../../../src/lib/utils/component.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\r\n\r\nimport { Application } from '../application';\r\nimport { EventDispatcher, Event, EventMap } from './events';\r\nimport { DeclarationOption } from './options/declaration';\r\n\r\nexport interface ComponentHost {\r\n    readonly application: Application;\r\n}\r\n\r\nexport interface Component extends AbstractComponent<ComponentHost> {\r\n\r\n}\r\n\r\nexport interface ComponentClass<T extends Component, O extends ComponentHost = ComponentHost> extends Function {\r\n    new(owner: O): T;\r\n}\r\n\r\nexport interface ComponentOptions {\r\n    name?: string;\r\n    childClass?: Function;\r\n    internal?: boolean;\r\n}\r\n\r\nconst childMappings: {host: ChildableComponent<any, any>, child: Function}[] = [];\r\n\r\nexport function Component(options: ComponentOptions): ClassDecorator {\r\n    return (target: Function) => {\r\n        const proto = target.prototype;\r\n        if (!(proto instanceof AbstractComponent)) {\r\n            throw new Error('The `Component` decorator can only be used with a subclass of `AbstractComponent`.');\r\n        }\r\n\r\n        if (options.childClass) {\r\n            if (!(proto instanceof ChildableComponent)) {\r\n                throw new Error('The `Component` decorator accepts the parameter `childClass` only when used with a subclass of `ChildableComponent`.');\r\n            }\r\n\r\n            childMappings.push({\r\n                host: proto,\r\n                child: options.childClass\r\n            });\r\n        }\r\n\r\n        const name = options.name;\r\n        if (name) {\r\n            proto.componentName = name;\r\n        }\r\n\r\n        const internal = !!options.internal;\r\n        if (name && !internal) {\r\n            for (const childMapping of childMappings) {\r\n                if (!(proto instanceof childMapping.child)) {\r\n                    continue;\r\n                }\r\n\r\n                const host = childMapping.host;\r\n                host['_defaultComponents'] = host['_defaultComponents'] || {};\r\n                host['_defaultComponents'][name] = target as any;\r\n                break;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport function Option(options: DeclarationOption): PropertyDecorator {\r\n    return function(target: object, propertyKey: string | symbol) {\r\n        if (!(target instanceof AbstractComponent)) {\r\n            throw new Error('The `Option` decorator can only be used on properties within an `AbstractComponent` subclass.');\r\n        }\r\n\r\n        options.component = target['_componentName'];\r\n        target['_componentOptions'] = target['_componentOptions'] || [];\r\n        target['_componentOptions'].push(options);\r\n\r\n        Object.defineProperty(target, propertyKey, {\r\n            get: function (this: AbstractComponent<ComponentHost>) {\r\n                return this.application.options.getValue(options.name);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n    };\r\n}\r\n\r\nexport class ComponentEvent extends Event {\r\n    owner: ComponentHost;\r\n\r\n    component: AbstractComponent<ComponentHost>;\r\n\r\n    static ADDED = 'componentAdded';\r\n\r\n    static REMOVED = 'componentRemoved';\r\n\r\n    constructor(name: string, owner: ComponentHost, component: AbstractComponent<ComponentHost>) {\r\n        super(name);\r\n        this.owner = owner;\r\n        this.component = component;\r\n    }\r\n}\r\n\r\n/**\r\n * Dummy owner to be passed in to AbstractComponent / ChildableComponents if the class being constructed is\r\n * the application. The application does not have an owner and will return itself for component.application\r\n * and component.owner.\r\n */\r\nexport const DUMMY_APPLICATION_OWNER = Symbol();\r\n\r\n/**\r\n * Component base class.\r\n */\r\nexport abstract class AbstractComponent<O extends ComponentHost> extends EventDispatcher implements ComponentHost {\r\n    /**\r\n     * The owner of this component instance.\r\n     */\r\n    private _componentOwner: O | typeof DUMMY_APPLICATION_OWNER;\r\n\r\n    /**\r\n     * The name of this component as set by the @Component decorator.\r\n     */\r\n    public componentName!: string;\r\n\r\n    /**\r\n     * A list of options defined by this component.\r\n     */\r\n    private _componentOptions?: DeclarationOption[];\r\n\r\n    /**\r\n     * Create new Component instance.\r\n     */\r\n    constructor(owner: O | typeof DUMMY_APPLICATION_OWNER) {\r\n        super();\r\n        this._componentOwner = owner;\r\n        this.initialize();\r\n    }\r\n\r\n    /**\r\n     * Initialize this component.\r\n     */\r\n    protected initialize() {}\r\n\r\n    protected bubble(name: Event|EventMap|string, ...args: any[]) {\r\n        super.trigger(name, ...args);\r\n\r\n        if (this.owner instanceof AbstractComponent && this._componentOwner !== DUMMY_APPLICATION_OWNER) {\r\n            this.owner.bubble(name, ...args);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return all option declarations emitted by this component.\r\n     */\r\n    getOptionDeclarations(): DeclarationOption[] {\r\n        return (this._componentOptions || []).slice();\r\n    }\r\n\r\n    /**\r\n     * Return the application / root component instance.\r\n     */\r\n    get application(): Application {\r\n        return this._componentOwner === DUMMY_APPLICATION_OWNER\r\n            ? this as any as Application\r\n            : this._componentOwner.application;\r\n    }\r\n\r\n    /**\r\n     * Return the owner of this component.\r\n     */\r\n    get owner(): O {\r\n        return this._componentOwner === DUMMY_APPLICATION_OWNER\r\n            ? this as any\r\n            : this._componentOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * Component base class.\r\n */\r\nexport abstract class ChildableComponent<O extends ComponentHost, C extends Component> extends AbstractComponent<O> {\r\n    /**\r\n     *\r\n     */\r\n    private _componentChildren?: {[name: string]: C};\r\n\r\n    private _defaultComponents?: {[name: string]: ComponentClass<C>};\r\n\r\n    /**\r\n     * Create new Component instance.\r\n     */\r\n    constructor(owner: O | typeof DUMMY_APPLICATION_OWNER) {\r\n        super(owner);\r\n\r\n        _.entries(this._defaultComponents || {}).forEach(([name, component]) => {\r\n            this.addComponent(name, component);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Retrieve a plugin instance.\r\n     *\r\n     * @returns  The instance of the plugin or undefined if no plugin with the given class is attached.\r\n     */\r\n    getComponent(name: string): C | undefined {\r\n        return (this._componentChildren || {})[name];\r\n    }\r\n\r\n    getComponents(): C[] {\r\n        return _.values(this._componentChildren);\r\n    }\r\n\r\n    hasComponent(name: string): boolean {\r\n        return !!(this._componentChildren || {})[name];\r\n    }\r\n\r\n    addComponent<T extends C>(name: string, componentClass: T|ComponentClass<T, O>): T {\r\n        if (!this._componentChildren) {\r\n            this._componentChildren = {};\r\n        }\r\n\r\n        if (this._componentChildren[name]) {\r\n            // Component already added so we will return the existing component\r\n            // TODO: add better logging around this because it could be unexpected but shouldn't be fatal\r\n            // See https://github.com/TypeStrong/typedoc/issues/846\r\n            return <T> this._componentChildren[name];\r\n        } else {\r\n            const component: T = typeof componentClass === 'function'\r\n                ? new (<ComponentClass<T>> componentClass)(this)\r\n                : componentClass;\r\n            const event = new ComponentEvent(ComponentEvent.ADDED, this, component);\r\n\r\n            this.bubble(event);\r\n            this._componentChildren[name] = component;\r\n\r\n            return component;\r\n        }\r\n    }\r\n\r\n    removeComponent(name: string): C | undefined {\r\n        const component = (this._componentChildren || {})[name];\r\n        if (component) {\r\n            delete this._componentChildren![name];\r\n            component.stopListening();\r\n            this.bubble(new ComponentEvent(ComponentEvent.REMOVED, this, component));\r\n            return component;\r\n        }\r\n    }\r\n\r\n    removeAllComponents() {\r\n        for (const component of _.values(this._componentChildren)) {\r\n            component.stopListening();\r\n        }\r\n\r\n        this._componentChildren = {};\r\n    }\r\n}\r\n"]}