{"version":3,"file":"loggers.js","sourceRoot":"","sources":["../../../src/lib/utils/loggers.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,6BAA6B;AAK7B,IAAY,QAMX;AAND,WAAY,QAAQ;IAChB,6CAAO,CAAA;IACP,uCAAI,CAAA;IACJ,uCAAI,CAAA;IACJ,yCAAK,CAAA;IACL,6CAAO,CAAA;AACX,CAAC,EANW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAMnB;AAQD,MAAa,MAAM;IAAnB;QAII,eAAU,GAAG,CAAC,CAAC;IA8HnB,CAAC;IAzHU,SAAS;QACZ,OAAO,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;IAC/B,CAAC;IAKM,WAAW;QACd,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;IACxB,CAAC;IAQM,KAAK,CAAC,IAAY,EAAE,GAAG,IAAc;QACxC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;IAChE,CAAC;IAQM,OAAO,CAAC,IAAY,EAAE,GAAG,IAAc;QAC1C,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACtE,CAAC;IAQM,OAAO,CAAC,IAAY,EAAE,GAAG,IAAc;QAC1C,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;IACnE,CAAC;IAQM,OAAO,CAAC,IAAY,EAAE,GAAG,IAAc;QAC1C,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;IACnE,CAAC;IAQM,IAAI,CAAC,IAAY,EAAE,GAAG,IAAc;QACvC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;IAChE,CAAC;IAQM,KAAK,CAAC,IAAY,EAAE,GAAG,IAAc;QACxC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;IACjE,CAAC;IASM,GAAG,CAAC,OAAe,EAAE,QAAkB,QAAQ,CAAC,IAAI,EAAE,OAAiB;QAC1E,IAAI,KAAK,KAAK,QAAQ,CAAC,KAAK,EAAE;YAC1B,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;SACxB;IACL,CAAC;IAOM,WAAW,CAAC,WAAyC;QACxD,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YAC/B,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACP,CAAC;IAOM,UAAU,CAAC,UAAyB;QACvC,IAAI,MAAc,CAAC;QACnB,IAAI,UAAU,CAAC,IAAI,EAAE;YACjB,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;YAClC,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,6BAA6B,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC;YACpG,MAAM,IAAI,EAAE,CAAC,GAAG,CAAC,OAAO,GAAG,GAAG,GAAG,EAAE,CAAC,4BAA4B,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SAC5G;aAAM;YACH,MAAM,GAAG,EAAE,CAAC,4BAA4B,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SACpF;QAED,QAAQ,UAAU,CAAC,QAAQ,EAAE;YACzB,KAAK,EAAE,CAAC,kBAAkB,CAAC,KAAK;gBAC5B,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;gBACjC,MAAM;YACV,KAAK,EAAE,CAAC,kBAAkB,CAAC,OAAO;gBAC9B,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAChC,MAAM;YACV,KAAK,EAAE,CAAC,kBAAkB,CAAC,OAAO;gBAC9B,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;SACvC;IACL,CAAC;CACJ;AAlID,wBAkIC;AAKD,MAAa,aAAc,SAAQ,MAAM;IAQ9B,GAAG,CAAC,OAAe,EAAE,QAAkB,QAAQ,CAAC,IAAI,EAAE,OAAiB;QAC1E,IAAI,KAAK,KAAK,QAAQ,CAAC,KAAK,EAAE;YAC1B,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;SACxB;QAED,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,KAAK,KAAK,QAAQ,CAAC,KAAK,EAAE;YAC1B,MAAM,IAAI,SAAS,CAAC;SACvB;QACD,IAAI,KAAK,KAAK,QAAQ,CAAC,IAAI,EAAE;YACzB,MAAM,IAAI,WAAW,CAAC;SACzB;QACD,MAAM,IAAI,OAAO,CAAC;QAElB,IAAI,OAAO,IAAI,KAAK,KAAK,QAAQ,CAAC,OAAO,EAAE;YACvC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SAChC;QACD,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACtC,IAAI,KAAK,KAAK,QAAQ,CAAC,OAAO,EAAE;YAC5B,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SAChC;IACL,CAAC;CACJ;AA9BD,sCA8BC;AAKD,MAAa,cAAe,SAAQ,MAAM;IAWtC,YAAY,QAAkB;QAC1B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IASM,GAAG,CAAC,OAAe,EAAE,QAAkB,QAAQ,CAAC,IAAI,EAAE,OAAiB;QAC1E,IAAI,KAAK,KAAK,QAAQ,CAAC,KAAK,EAAE;YAC1B,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC;SACxB;QAED,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;CACJ;AA9BD,wCA8BC","sourcesContent":["import * as ts from 'typescript';\r\nimport * as Util from 'util';\r\n\r\n/**\r\n * List of known log levels. Used to specify the urgency of a log message.\r\n */\r\nexport enum LogLevel {\r\n    Verbose,\r\n    Info,\r\n    Warn,\r\n    Error,\r\n    Success\r\n}\r\n\r\n/**\r\n * A logger that will not produce any output.\r\n *\r\n * This logger also serves as the ase calls of other loggers as it implements\r\n * all the required utility functions.\r\n */\r\nexport class Logger {\r\n    /**\r\n     * How many error messages have been logged?\r\n     */\r\n    errorCount = 0;\r\n\r\n    /**\r\n     * Has an error been raised through the log method?\r\n     */\r\n    public hasErrors(): boolean {\r\n        return this.errorCount > 0;\r\n    }\r\n\r\n    /**\r\n     * Reset the error counter.\r\n     */\r\n    public resetErrors() {\r\n        this.errorCount = 0;\r\n    }\r\n\r\n    /**\r\n     * Log the given message.\r\n     *\r\n     * @param text  The message that should be logged.\r\n     * @param args  The arguments that should be printed into the given message.\r\n     */\r\n    public write(text: string, ...args: string[]) {\r\n        this.log(Util.format.apply(this, arguments), LogLevel.Info);\r\n    }\r\n\r\n    /**\r\n     * Log the given message with a trailing whitespace.\r\n     *\r\n     * @param text  The message that should be logged.\r\n     * @param args  The arguments that should be printed into the given message.\r\n     */\r\n    public writeln(text: string, ...args: string[]) {\r\n        this.log(Util.format.apply(this, arguments), LogLevel.Info, true);\r\n    }\r\n\r\n    /**\r\n     * Log the given success message.\r\n     *\r\n     * @param text  The message that should be logged.\r\n     * @param args  The arguments that should be printed into the given message.\r\n     */\r\n    public success(text: string, ...args: string[]) {\r\n        this.log(Util.format.apply(this, arguments), LogLevel.Success);\r\n    }\r\n\r\n    /**\r\n     * Log the given verbose message.\r\n     *\r\n     * @param text  The message that should be logged.\r\n     * @param args  The arguments that should be printed into the given message.\r\n     */\r\n    public verbose(text: string, ...args: string[]) {\r\n        this.log(Util.format.apply(this, arguments), LogLevel.Verbose);\r\n    }\r\n\r\n    /**\r\n     * Log the given warning.\r\n     *\r\n     * @param text  The warning that should be logged.\r\n     * @param args  The arguments that should be printed into the given warning.\r\n     */\r\n    public warn(text: string, ...args: string[]) {\r\n        this.log(Util.format.apply(this, arguments), LogLevel.Warn);\r\n    }\r\n\r\n    /**\r\n     * Log the given error.\r\n     *\r\n     * @param text  The error that should be logged.\r\n     * @param args  The arguments that should be printed into the given error.\r\n     */\r\n    public error(text: string, ...args: string[]) {\r\n        this.log(Util.format.apply(this, arguments), LogLevel.Error);\r\n    }\r\n\r\n    /**\r\n     * Print a log message.\r\n     *\r\n     * @param message  The message itself.\r\n     * @param level  The urgency of the log message.\r\n     * @param newLine  Should the logger print a trailing whitespace?\r\n     */\r\n    public log(message: string, level: LogLevel = LogLevel.Info, newLine?: boolean) {\r\n        if (level === LogLevel.Error) {\r\n            this.errorCount += 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Print the given TypeScript log messages.\r\n     *\r\n     * @param diagnostics  The TypeScript messages that should be logged.\r\n     */\r\n    public diagnostics(diagnostics: ReadonlyArray<ts.Diagnostic>) {\r\n        diagnostics.forEach((diagnostic) => {\r\n            this.diagnostic(diagnostic);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Print the given TypeScript log message.\r\n     *\r\n     * @param diagnostic  The TypeScript message that should be logged.\r\n     */\r\n    public diagnostic(diagnostic: ts.Diagnostic) {\r\n        let output: string;\r\n        if (diagnostic.file) {\r\n            output = diagnostic.file.fileName;\r\n            output += '(' + ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start || 0).line + ')';\r\n            output += ts.sys.newLine + ' ' + ts.flattenDiagnosticMessageText(diagnostic.messageText, ts.sys.newLine);\r\n        } else {\r\n            output = ts.flattenDiagnosticMessageText(diagnostic.messageText, ts.sys.newLine);\r\n        }\r\n\r\n        switch (diagnostic.category) {\r\n            case ts.DiagnosticCategory.Error:\r\n                this.log(output, LogLevel.Error);\r\n                break;\r\n            case ts.DiagnosticCategory.Warning:\r\n                this.log(output, LogLevel.Warn);\r\n                break;\r\n            case ts.DiagnosticCategory.Message:\r\n                this.log(output, LogLevel.Info);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * A logger that outputs all messages to the console.\r\n */\r\nexport class ConsoleLogger extends Logger {\r\n    /**\r\n     * Print a log message.\r\n     *\r\n     * @param message  The message itself.\r\n     * @param level  The urgency of the log message.\r\n     * @param newLine  Should the logger print a trailing whitespace?\r\n     */\r\n    public log(message: string, level: LogLevel = LogLevel.Info, newLine?: boolean) {\r\n        if (level === LogLevel.Error) {\r\n            this.errorCount += 1;\r\n        }\r\n\r\n        let output = '';\r\n        if (level === LogLevel.Error) {\r\n            output += 'Error: ';\r\n        }\r\n        if (level === LogLevel.Warn) {\r\n            output += 'Warning: ';\r\n        }\r\n        output += message;\r\n\r\n        if (newLine || level === LogLevel.Success) {\r\n            ts.sys.write(ts.sys.newLine);\r\n        }\r\n        ts.sys.write(output + ts.sys.newLine);\r\n        if (level === LogLevel.Success) {\r\n            ts.sys.write(ts.sys.newLine);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * A logger that calls a callback function.\r\n */\r\nexport class CallbackLogger extends Logger {\r\n    /**\r\n     * This loggers callback function\r\n     */\r\n    callback: Function;\r\n\r\n    /**\r\n     * Create a new CallbackLogger instance.\r\n     *\r\n     * @param callback  The callback that should be used to log messages.\r\n     */\r\n    constructor(callback: Function) {\r\n        super();\r\n        this.callback = callback;\r\n    }\r\n\r\n    /**\r\n     * Print a log message.\r\n     *\r\n     * @param message  The message itself.\r\n     * @param level  The urgency of the log message.\r\n     * @param newLine  Should the logger print a trailing whitespace?\r\n     */\r\n    public log(message: string, level: LogLevel = LogLevel.Info, newLine?: boolean) {\r\n        if (level === LogLevel.Error) {\r\n            this.errorCount += 1;\r\n        }\r\n\r\n        this.callback(message, level, newLine);\r\n    }\r\n}\r\n"]}