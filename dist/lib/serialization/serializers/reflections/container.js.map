{"version":3,"file":"container.js","sourceRoot":"","sources":["../../../../../src/lib/serialization/serializers/reflections/container.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,sDAAqD;AACrD,0CAAsD;AAEtD,+CAAiE;AACjE,oCAAmD;AAGnD;IAAmD,iDAAkD;IAArG;;IA4BA,CAAC;IA1BC,kDAAU,GAAV;QACE,iBAAM,UAAU,WAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,UAAC,CAAsB,IAAK,OAAA,CAAC,YAAY,4BAAmB,EAAhC,CAAgC,CAAC;IAC/E,CAAC;IAED,gDAAQ,GAAR,UAAS,SAA8B,EAAE,GAAS;QAAlD,iBAmBC;QAlBC,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;QAEhB,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACpD,GAAG,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAE,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,EAA1B,CAA0B,CAAE,CAAC;QAC3E,CAAC;QAED,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACtD,GAAG,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO;iBAC5B,GAAG,CAAE,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,KAAK;iBACvB,QAAQ,CAAC,IAAI,+BAAsB,CAAC;gBACnC,QAAQ,EAAE,MAAM,CAAC,QAAQ;gBACzB,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,SAAS,EAAE,MAAM,CAAC,SAAS;aAC5B,CAAC,CAAC,EALW,CAKX,CACJ,CAAC;QACN,CAAC;QAED,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IA1BU,6BAA6B;QADzC,qBAAS,CAAC,EAAC,IAAI,EAAE,iCAAiC,EAAC,CAAC;OACxC,6BAA6B,CA4BzC;IAAD,oCAAC;CAAA,AA5BD,CAAmD,0CAA6B,GA4B/E;AA5BY,sEAA6B","sourcesContent":["import { Component } from '../../../utils/component';\r\nimport { ContainerReflection } from '../../../models';\r\n\r\nimport { ReflectionSerializerComponent } from '../../components';\r\nimport { SourceReferenceWrapper } from '../models';\r\n\r\n@Component({name: 'serializer:container-reflection'})\r\nexport class ContainerReflectionSerializer extends ReflectionSerializerComponent<ContainerReflection> {\r\n\r\n  initialize(): void {\r\n    super.initialize();\r\n    this.supports = (r: ContainerReflection) => r instanceof ContainerReflection;\r\n  }\r\n\r\n  toObject(container: ContainerReflection, obj?: any): any {\r\n    obj = obj || {};\r\n\r\n    if (container.groups && container.groups.length > 0) {\r\n      obj.groups = container.groups.map( group => this.owner.toObject(group) );\r\n    }\r\n\r\n    if (container.sources && container.sources.length > 0) {\r\n      obj.sources = container.sources\r\n        .map( source => this.owner\r\n          .toObject(new SourceReferenceWrapper({\r\n            fileName: source.fileName,\r\n            line: source.line,\r\n            character: source.character\r\n          }))\r\n        );\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n}\r\n"]}