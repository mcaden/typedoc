{"version":3,"file":"abstract.js","sourceRoot":"","sources":["../../../../../src/lib/serialization/serializers/reflections/abstract.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,sDAAqD;AACrD,0CAA+D;AAE/D,+CAAiE;AACjE,oCAA6C;AAG7C;IAA0C,wCAAyC;IAAnF;;IA4DA,CAAC;IAxDC,yCAAU,GAAV;QACE,iBAAM,UAAU,WAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,UAAC,CAAa,IAAK,OAAA,IAAI,EAAJ,CAAI,CAAC;IAC1C,CAAC;IAED,uCAAQ,GAAR,UAAS,UAAsB,EAAE,GAAS;QAA1C,iBAkDC;QAjDC,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;QAEhB,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,EAAE,EAAU,UAAU,CAAC,EAAE;YACzB,IAAI,EAAQ,UAAU,CAAC,IAAI;YAC3B,IAAI,EAAQ,UAAU,CAAC,IAAI;YAC3B,UAAU,EAAE,UAAU,CAAC,UAAU;YACjC,KAAK,EAAO,EAAE;SACf,CAAC,CAAC;QAEH,IAAI,UAAU,CAAC,YAAY,KAAK,UAAU,CAAC,IAAI,EAAE;YAC/C,GAAG,CAAC,YAAY,GAAG,UAAU,CAAC,YAAY,CAAC;SAC5C;QAED,IAAI,UAAU,CAAC,OAAO,EAAE;YACtB,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SACvD;QAED,KAAK,IAAI,GAAG,IAAI,UAAU,CAAC,KAAK,EAAE;YAEhC,IAAI,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,IAAU,GAAG,IAAI,GAAG,KAAK,OAAO,EAAE;gBACrD,SAAS;aACV;YACD,IAAI,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;gBACzB,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;aACvB;SACF;QAED,IAAI,UAAU,CAAC,SAAS,IAAI,UAAU,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3D,GAAG,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,CAAE,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAtB,CAAsB,CAAE,CAAC;SACzE;QAED,IAAI,UAAU,CAAC,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7D,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC,GAAG,CAAE,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,yBAAgB,CAAC,CAAC,CAAC,CAAC,EAA5C,CAA4C,CAAE,CAAC;SACjG;QAED,UAAU,CAAC,QAAQ,CAAC,UAAC,KAAK,EAAE,QAAQ;YAClC,IAAI,QAAQ,KAAK,yBAAgB,CAAC,WAAW,EAAE;gBAC7C,OAAO;aACR;YACD,IAAI,IAAI,GAAG,yBAAgB,CAAC,QAAQ,CAAC,CAAC;YACtC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACd,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;aAChB;YACD,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC;IACb,CAAC;IAzDM,6BAAQ,GAAG,IAAI,CAAC;IAFZ,oBAAoB;QADhC,qBAAS,CAAC,EAAC,IAAI,EAAE,uBAAuB,EAAC,CAAC;OAC9B,oBAAoB,CA4DhC;IAAD,2BAAC;CAAA,AA5DD,CAA0C,0CAA6B,GA4DtE;AA5DY,oDAAoB","sourcesContent":["import { Component } from '../../../utils/component';\r\nimport { Reflection, TraverseProperty } from '../../../models';\r\n\r\nimport { ReflectionSerializerComponent } from '../../components';\r\nimport { DecoratorWrapper } from '../models';\r\n\r\n@Component({name: 'serializer:reflection'})\r\nexport class ReflectionSerializer extends ReflectionSerializerComponent<Reflection> {\r\n\r\n  static PRIORITY = 1000;\r\n\r\n  initialize(): void {\r\n    super.initialize();\r\n    this.supports = (r: Reflection) => true;\r\n  }\r\n\r\n  toObject(reflection: Reflection, obj?: any): any {\r\n    obj = obj || {};\r\n\r\n    Object.assign(obj, {\r\n      id:         reflection.id,\r\n      name:       reflection.name,\r\n      kind:       reflection.kind,\r\n      kindString: reflection.kindString,\r\n      flags:      {}                      // TODO: remove if no flags\r\n    });\r\n\r\n    if (reflection.originalName !== reflection.name) {\r\n      obj.originalName = reflection.originalName;\r\n    }\r\n\r\n    if (reflection.comment) {\r\n      obj.comment = this.owner.toObject(reflection.comment);\r\n    }\r\n\r\n    for (let key in reflection.flags) {\r\n      // tslint:disable-next-line:triple-equals\r\n      if (parseInt(key, 10) == <any> key || key === 'flags') {\r\n        continue;\r\n      }\r\n      if (reflection.flags[key]) {\r\n        obj.flags[key] = true;\r\n      }\r\n    }\r\n\r\n    if (reflection.decorates && reflection.decorates.length > 0) {\r\n      obj.decorates = reflection.decorates.map( t => this.owner.toObject(t) );\r\n    }\r\n\r\n    if (reflection.decorators && reflection.decorators.length > 0) {\r\n      obj.decorators = reflection.decorators.map( d => this.owner.toObject(new DecoratorWrapper(d)) );\r\n    }\r\n\r\n    reflection.traverse((child, property) => {\r\n      if (property === TraverseProperty.TypeLiteral) {\r\n        return;\r\n      }\r\n      let name = TraverseProperty[property];\r\n      name = name.substr(0, 1).toLowerCase() + name.substr(1);\r\n      if (!obj[name]) {\r\n        obj[name] = [];\r\n      }\r\n      obj[name].push(this.owner.toObject(child));\r\n    });\r\n\r\n    return obj;\r\n  }\r\n}\r\n"]}