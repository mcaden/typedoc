{"version":3,"file":"decorator.js","sourceRoot":"","sources":["../../../../src/lib/serialization/serializers/decorator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,mDAAkD;AAElD,4CAAoD;AACpD,gEAA8D;AAG9D;IAAkD,gDAAqC;IADvF;QAAA,qEAsCC;QAzBC,oBAAc,GAAG,8BAA4B,CAAC,cAAc,CAAC;QAC7D,0BAAoB,GAAG,oCAAgB,CAAC;;IAwB1C,CAAC;qCArCY,4BAA4B;IAOtB,2CAAc,GAA/B,UAAgC,QAAa;QAC3C,MAAM,CAAC,QAAQ,YAAY,oCAAgB,CAAC;IAC9C,CAAC;IAMD,iDAAU,GAAV;QACI,iBAAM,UAAU,WAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,UAAC,CAAmB,IAAK,OAAA,CAAC,YAAY,oCAAgB,EAA7B,CAA6B,CAAC;IAC3E,CAAC;IAED,+CAAQ,GAAR,UAAS,gBAAkC,EAAE,GAAS;QAClD,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;QAEhB,IAAM,SAAS,GAAG,gBAAgB,CAAC,SAAS,CAAC;QAC7C,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;QAE1B,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YACnB,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC;QAED,EAAE,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;YACxB,GAAG,CAAC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;QACtC,CAAC;QAED,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IAjCM,qCAAQ,GAAG,IAAI,CAAC;IAFZ,4BAA4B;QADxC,qBAAS,CAAC,EAAC,IAAI,EAAE,gCAAgC,EAAC,CAAC;OACvC,4BAA4B,CAqCxC;IAAD,mCAAC;;CAAA,AArCD,CAAkD,gCAAmB,GAqCpE;AArCY,oEAA4B","sourcesContent":["import { Component } from '../../utils/component';\r\n\r\nimport { SerializerComponent } from '../components';\r\nimport { DecoratorWrapper } from './models/decorator-wrapper';\r\n\r\n@Component({name: 'serializer:decorator-container'})\r\nexport class DecoratorContainerSerializer extends SerializerComponent<DecoratorWrapper> {\r\n\r\n  static PRIORITY = 1000;\r\n\r\n  /**\r\n   * Filter for instances of [[DecoratorWrapper]]\r\n   */\r\n  protected static serializeGroup(instance: any): boolean {\r\n    return instance instanceof DecoratorWrapper;\r\n  }\r\n\r\n  // use same fn for every instance\r\n  serializeGroup = DecoratorContainerSerializer.serializeGroup;\r\n  serializeGroupSymbol = DecoratorWrapper;\r\n\r\n  initialize(): void {\r\n      super.initialize();\r\n      this.supports = (s: DecoratorWrapper) => s instanceof DecoratorWrapper;\r\n  }\r\n\r\n  toObject(decoratorWrapper: DecoratorWrapper, obj?: any): any {\r\n      obj = obj || {};\r\n\r\n      const decorator = decoratorWrapper.decorator;\r\n      obj.name = decorator.name;\r\n\r\n      if (decorator.type) {\r\n        obj.type = this.owner.toObject(decorator.type);\r\n      }\r\n\r\n      if (decorator.arguments) {\r\n        obj.arguments = decorator.arguments;\r\n      }\r\n\r\n      return obj;\r\n  }\r\n\r\n}\r\n"]}