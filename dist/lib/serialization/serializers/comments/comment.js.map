{"version":3,"file":"comment.js","sourceRoot":"","sources":["../../../../../src/lib/serialization/serializers/comments/comment.ts"],"names":[],"mappings":";;;;;;;;AAAA,wDAAqD;AACrD,4CAA0C;AAE1C,iDAAuD;AAGvD,IAAa,iBAAiB,GAA9B,MAAa,iBAAkB,SAAQ,gCAA4B;IADnE;;QAgBE,yBAAoB,GAAG,gBAAO,CAAC;IAqBjC,CAAC;IA7BC,cAAc,CAAC,QAAiB;QAC9B,OAAO,QAAQ,YAAY,gBAAO,CAAC;IACrC,CAAC;IAED,QAAQ,CAAC,CAAU;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IAID,QAAQ,CAAC,OAAgB,EAAE,GAAS;QAClC,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;QAEhB,IAAI,OAAO,CAAC,SAAS,EAAE;YACrB,GAAG,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;SACnC;QACD,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,GAAG,CAAC,IAAI,GAAQ,OAAO,CAAC,IAAI,CAAC;SAC9B;QACD,IAAI,OAAO,CAAC,OAAO,EAAE;YACnB,GAAG,CAAC,OAAO,GAAK,OAAO,CAAC,OAAO,CAAC;SACjC;QAED,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE;YACvC,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC;YACd,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SACxE;QACD,OAAO,GAAG,CAAC;IACb,CAAC;CACF,CAAA;AAlCQ,0BAAQ,GAAG,IAAI,CAAC;AAFZ,iBAAiB;IAD7B,qBAAS,CAAC,EAAC,IAAI,EAAE,oBAAoB,EAAC,CAAC;GAC3B,iBAAiB,CAoC7B;AApCY,8CAAiB","sourcesContent":["import { Component } from '../../../utils/component';\r\nimport { Comment } from '../../../models';\r\n\r\nimport { SerializerComponent } from '../../components';\r\n\r\n@Component({name: 'serializer:comment'})\r\nexport class CommentSerializer extends SerializerComponent<Comment> {\r\n\r\n  static PRIORITY = 1000;\r\n\r\n  /**\r\n   * Filter for instances of [[Comment]]\r\n   */\r\n  serializeGroup(instance: unknown): boolean {\r\n    return instance instanceof Comment;\r\n  }\r\n\r\n  supports(t: unknown) {\r\n    return true;\r\n  }\r\n\r\n  serializeGroupSymbol = Comment;\r\n\r\n  toObject(comment: Comment, obj?: any): any {\r\n    obj = obj || {};\r\n\r\n    if (comment.shortText) {\r\n      obj.shortText = comment.shortText;\r\n    }\r\n    if (comment.text) {\r\n      obj.text      = comment.text;\r\n    }\r\n    if (comment.returns) {\r\n      obj.returns   = comment.returns;\r\n    }\r\n\r\n    if (comment.tags && comment.tags.length) {\r\n      obj.tags = [];\r\n      comment.tags.forEach((tag) => obj.tags.push(this.owner.toObject(tag)));\r\n    }\r\n    return obj;\r\n  }\r\n}\r\n"]}